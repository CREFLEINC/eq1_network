{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"EQ-1 Network","text":"<p>EQ-1 Network\ub294 \ub2e4\uc591\ud55c \ud1b5\uc2e0 \ud504\ub85c\ud1a0\ucf5c\uc744 \ud50c\ub7ec\uadf8\uc778 \uae30\ubc18\uc73c\ub85c \ud655\uc7a5 \uac00\ub2a5\ud558\uac8c \uad6c\uc131\ud55c Python \ud1b5\uc2e0 \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4.</p>"},{"location":"#_1","title":"\uac1c\uc694","text":"<p>\ud604\uc7ac MQTT, TCP, Serial \ud504\ub85c\ud1a0\ucf5c\uc744 \uc9c0\uc6d0\ud558\uba70, \ub2e4\uc74c \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4:</p> <ul> <li>MQTT: MQTT v3.1.1 \uae30\ubcf8 \uae30\ub2a5 \uc9c0\uc6d0, \uc778\uc99d, \uc7ac\uc5f0\uacb0, QoS</li> <li>TCP: TCP \ud074\ub77c\uc774\uc5b8\ud2b8/\uc11c\ubc84 \ud1b5\uc2e0, \ubc14\uc774\ub108\ub9ac/\ud14d\uc2a4\ud2b8 \ub370\uc774\ud130 \uc9c0\uc6d0</li> <li>Serial: \uc2dc\ub9ac\uc5bc \ud3ec\ud2b8 \ud1b5\uc2e0, \ub2e4\uc591\ud55c \ubcf4\ub4dc\ub808\uc774\ud2b8 \uc9c0\uc6d0</li> <li>Authentication: Username/Password \uc778\uc99d (MQTT)</li> <li>Reliability: \uc7ac\uc5f0\uacb0 \uc2dc \uad6c\ub3c5 \uc790\ub3d9 \ubcf5\uad6c (MQTT)</li> <li>Thread Safety: \uc2a4\ub808\ub4dc \uc548\uc804\ud55c API \uc124\uacc4</li> <li>Manager System: ReqResManager, PubSubManager\ub97c \ud1b5\ud55c \ud1b5\ud569 \uad00\ub9ac</li> </ul>"},{"location":"#_2","title":"\uc2dc\uc791\ud558\uae30 \uc804\uc5d0","text":"<p>\ub2e4\uc74c \uc694\uad6c\uc0ac\ud56d\uc744 \ud655\uc778\ud558\uc138\uc694:</p> <ul> <li>Python 3.10+</li> <li>paho-mqtt 1.6.0+</li> <li>pyserial 3.5+ (Serial \ud1b5\uc2e0 \uc0ac\uc6a9 \uc2dc)</li> </ul>"},{"location":"#_3","title":"\uc124\uce58","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"#_4","title":"\ube60\ub978 \uc2dc\uc791","text":""},{"location":"#mqtt","title":"\uae30\ubcf8 MQTT \uc0ac\uc6a9\ubc95","text":"<pre><code>from eq1_network.protocols.mqtt.mqtt_protocol import MQTTProtocol, BrokerConfig, ClientConfig\n\n# 1. \uc124\uc815 \uac1d\uccb4 \uc0dd\uc131\nbroker_config = BrokerConfig(\n    broker_address=\"broker.example.com\",\n    port=1883,\n    keepalive=60\n)\nclient_config = ClientConfig()\n\n# 2. MQTT \ud504\ub85c\ud1a0\ucf5c \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\nmqtt = MQTTProtocol(broker_config, client_config)\n\n# 3. \uc5f0\uacb0 (\uba85\uc2dc\uc801 \ud638\ucd9c \ud544\uc694)\nmqtt.connect()\n\n# 4. \uba54\uc2dc\uc9c0 \ucf5c\ubc31 \uc815\uc758\ndef message_callback(topic: str, payload: bytes):\n    print(f\"Received: [{topic}] {payload.decode()}\")\n\n# 5. \ud1a0\ud53d \uad6c\ub3c5\nmqtt.subscribe(\"test/topic\", message_callback, qos=1)\n\n# 6. \uba54\uc2dc\uc9c0 \ubc1c\ud589\nmqtt.publish(\"test/topic\", \"Hello MQTT!\", qos=1)\n\n# 7. \uc5f0\uacb0 \ud574\uc81c\nmqtt.disconnect()\n</code></pre>"},{"location":"#tcp","title":"\uae30\ubcf8 TCP \uc0ac\uc6a9\ubc95","text":"<pre><code>from app import ReqResManager\nfrom eq1_network.protocols.ethernet.tcp_client import TCPClient\nfrom eq1_network.protocols.ethernet.tcp_server import TCPServer\n\n# TCP \ud074\ub77c\uc774\uc5b8\ud2b8 \uc124\uc815\ntcp_client = TCPClient(\"localhost\", 8080, timeout=1)\nReqResManager.register(\"tcp_client\", tcp_client)\n\n# TCP \uc11c\ubc84 \uc124\uc815\ntcp_server = TCPServer(\"localhost\", 8081, timeout=1)\nReqResManager.register(\"tcp_server\", tcp_server)\n\n# \uc5f0\uacb0 \ubc0f \ud1b5\uc2e0\nif ReqResManager.connect(\"tcp_client\"):\n    result = ReqResManager.send(\"tcp_client\", b\"Hello Server!\")\n    if result &gt; 0:\n        response = ReqResManager.read(\"tcp_client\")\n        print(f\"Response: {response.decode()}\")\n    ReqResManager.disconnect(\"tcp_client\")\n</code></pre>"},{"location":"#serial","title":"\uae30\ubcf8 Serial \uc0ac\uc6a9\ubc95","text":"<pre><code>from app import ReqResManager\nfrom eq1_network.protocols.serial.serial_protocol import SerialProtocol\n\n# \uc2dc\ub9ac\uc5bc \ud504\ub85c\ud1a0\ucf5c \uc124\uc815\nserial_protocol = SerialProtocol(\"COM1\", 9600, timeout=1)\nReqResManager.register(\"serial\", serial_protocol)\n\n# \uc5f0\uacb0 \ubc0f \ud1b5\uc2e0\nif ReqResManager.connect(\"serial\"):\n    result = ReqResManager.send(\"serial\", b\"AT\\r\\n\")\n    if result &gt; 0:\n        response = ReqResManager.read(\"serial\")\n        print(f\"Response: {response.decode()}\")\n    ReqResManager.disconnect(\"serial\")\n</code></pre>"},{"location":"#mqtt_1","title":"\uc778\uc99d \uc5f0\uacb0 (MQTT)","text":"<pre><code>from eq1_network.protocols.mqtt.mqtt_protocol import MQTTProtocol, BrokerConfig, ClientConfig\n\n# \uc778\uc99d \uc124\uc815\nbroker_config = BrokerConfig(\n    broker_address=\"broker.example.com\",\n    port=1883,\n    username=\"mqtt_username\",\n    password=\"mqtt_password\",\n    keepalive=60\n)\nclient_config = ClientConfig()\n\nmqtt = MQTTProtocol(broker_config, client_config)\nmqtt.connect()\n\n# Retained Message \ubc1c\ud589\nmqtt.publish(\"device/status\", \"online\", qos=1, retain=True)\n\nmqtt.disconnect()\n</code></pre>"},{"location":"#_5","title":"\uc8fc\uc694 \uae30\ub2a5","text":""},{"location":"#_6","title":"\ud604\uc7ac \uad6c\ud604 \uc0c1\ud0dc","text":"<ul> <li>MQTT \ud504\ub85c\ud1a0\ucf5c:<ul> <li>MQTT v3.1.1 \uae30\ubcf8 \uae30\ub2a5 \uc9c0\uc6d0</li> <li>QoS 0, 1, 2 \ub808\ubca8 \uc9c0\uc6d0 (\uae30\ubcf8\uac12: QoS 0)</li> <li>Keep-alive \uba54\ucee4\ub2c8\uc998</li> </ul> </li> <li>TCP \ud504\ub85c\ud1a0\ucf5c:<ul> <li>TCP \ud074\ub77c\uc774\uc5b8\ud2b8/\uc11c\ubc84 \ud1b5\uc2e0 \uc9c0\uc6d0</li> <li>\ubc14\uc774\ub108\ub9ac/\ud14d\uc2a4\ud2b8 \ub370\uc774\ud130 \uc1a1\uc218\uc2e0</li> <li>\ud0c0\uc784\uc544\uc6c3 \uc124\uc815 \ubc0f \uc5f0\uacb0 \uad00\ub9ac</li> <li>JSON \ub370\uc774\ud130 \uad6c\uc870\ud654 \uc9c0\uc6d0</li> </ul> </li> <li>Serial \ud504\ub85c\ud1a0\ucf5c:<ul> <li>\uc2dc\ub9ac\uc5bc \ud3ec\ud2b8 \ud1b5\uc2e0 \uc9c0\uc6d0</li> <li>\ub2e4\uc591\ud55c \ubcf4\ub4dc\ub808\uc774\ud2b8 \uc124\uc815</li> <li>\ubc14\uc774\ub108\ub9ac/\ud14d\uc2a4\ud2b8 \ub370\uc774\ud130 \uc1a1\uc218\uc2e0</li> <li>AT \uba85\ub839\uc5b4 \uc9c0\uc6d0</li> </ul> </li> <li>\uc778\uc99d \uae30\ub2a5:<ul> <li>Username/Password \uc778\uc99d (MQTT)</li> </ul> </li> <li>MQTT \uace0\uae09 \uae30\ub2a5:<ul> <li>Retained Messages</li> <li>\uc7ac\uc5f0\uacb0 \uc2dc \uad6c\ub3c5 \uc790\ub3d9 \ubcf5\uad6c</li> </ul> </li> <li>\uc2e0\ub8b0\uc131:<ul> <li>\uc608\uae30\uce58 \ubabb\ud55c \uc5f0\uacb0 \uc2e4\ud328 \uc2dc \uc790\ub3d9 \uc7ac\uc5f0\uacb0 (\uc9c0\uc218 \ubc31\uc624\ud504)</li> <li>\uc7ac\uc5f0\uacb0 \uc2dc \uad6c\ub3c5 \uc790\ub3d9 \ubcf5\uad6c \ubc0f \uba54\uc2dc\uc9c0 \ud050 \ucc98\ub9ac</li> <li>\uc608\uc678 \ucc98\ub9ac \ubc0f \ub85c\uae45</li> <li>\uc2a4\ub808\ub4dc \uc548\uc804\ud55c API</li> <li>\uba85\uc2dc\uc801 \uc5f0\uacb0 \ud544\uc694: connect() \uba54\uc11c\ub4dc\ub97c \ubc18\ub4dc\uc2dc \ud638\ucd9c\ud574\uc57c \ud568</li> </ul> </li> <li>\ucd94\uc0c1\ud654\ub41c \uc778\ud130\ud398\uc774\uc2a4:<ul> <li><code>ReqRes(\uc694\uccad/\uc751\ub2f5), PubSub(\ubc1c\ud589/\uad6c\ub3c5)</code> \uc778\ud130\ud398\uc774\uc2a4</li> </ul> </li> <li>\ub370\uc774\ud130 \ud074\ub798\uc2a4:<ul> <li><code>SendData</code>, <code>ReceivedData</code> \ucd94\uc0c1 \ud074\ub798\uc2a4 \uad6c\ud604</li> <li><code>PacketStructure</code> \ud328\ud0b7 \uad6c\uc870\ud654 \ud074\ub798\uc2a4</li> <li><code>PacketStructureInterface</code> \ud328\ud0b7 \uc778\ud130\ud398\uc774\uc2a4</li> </ul> </li> <li>\ub9e4\ub2c8\uc800 \uc2dc\uc2a4\ud15c:<ul> <li><code>ReqResManager</code>: ReqRes \ud504\ub85c\ud1a0\ucf5c \ud1b5\ud569 \uad00\ub9ac</li> <li><code>PubSubManager</code>: PubSub \ud504\ub85c\ud1a0\ucf5c \ud1b5\ud569 \uad00\ub9ac</li> </ul> </li> </ul>"},{"location":"#_7","title":"\ud83d\udd04 \ubbf8\uad6c\ud604 \uae30\ub2a5","text":"<ul> <li>\ud50c\ub7ec\uadf8\uc778 \uae30\ubc18 \ud655\uc7a5:<ul> <li>Modbus \ub4f1 \uc0c8\ub85c\uc6b4 \ud504\ub85c\ud1a0\ucf5c \ucd94\uac00 \uc608\uc815</li> </ul> </li> <li>\ubcf4\uc548 \uac15\ud654:<ul> <li>TLS/SSL \uc9c0\uc6d0, Will Message \ub4f1</li> </ul> </li> <li>MQTT v5.0 \uae30\ub2a5\ub4e4:<ul> <li>Shared Subscriptions, Message Expiry \ub4f1</li> </ul> </li> <li>PacketInterface \uc644\uc804 \uad6c\ud604:<ul> <li>SendData/ReceivedData \ud074\ub798\uc2a4\uc758 PacketInterface \uc0c1\uc18d</li> <li>NetworkHandler \ud074\ub798\uc2a4\uc758 PacketInterface \uc9c0\uc6d0</li> </ul> </li> </ul>"},{"location":"#_8","title":"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870","text":"<pre><code>app/\n\u251c\u2500\u2500 common/         # \uacf5\ud1b5 \ubaa8\ub4c8 (\uc608\uc678, \ub85c\uae45 \ub4f1)\n\u251c\u2500\u2500 interfaces/     # \ucd94\uc0c1 \uc778\ud130\ud398\uc774\uc2a4 (Protocol, Packet \ub4f1)\n\u251c\u2500\u2500 manager/        # \ud504\ub85c\ud1a0\ucf5c \ub9e4\ub2c8\uc800\n\u251c\u2500\u2500 protocols/      # \uc2e4\uc81c \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604\uccb4\n\u2502   \u251c\u2500\u2500 mqtt/       # MQTT \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604\n\u2502   \u251c\u2500\u2500 ethernet/   # TCP \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604\n\u2502   \u2514\u2500\u2500 serial/     # Serial \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604\n\u251c\u2500\u2500 worker/         # Listener, Requester \uc6cc\ucee4 \ubaa8\ub4c8\n\u251c\u2500\u2500 data.py         # SendData, ReceivedData, PacketStructure\n\u251c\u2500\u2500 network.py      # NetworkHandler\n\u2514\u2500\u2500 cli.py          # CLI \uc778\ud130\ud398\uc774\uc2a4\n</code></pre>"},{"location":"#_9","title":"\uc2dc\uc2a4\ud15c \uc694\uad6c\uc0ac\ud56d","text":"<ul> <li>Python 3.10+ (\uad8c\uc7a5)</li> <li>OS: Windows, macOS, Linux</li> <li>\uc124\uce58 \uc804 \uac00\uc0c1\ud658\uacbd(venv) \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"#_10","title":"\uc758\uc874\uc131","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"#_11","title":"\uc544\ud0a4\ud14d\ucc98","text":""},{"location":"#_12","title":"\uc778\ud130\ud398\uc774\uc2a4","text":"<ul> <li>BaseProtocol (ABC)<ul> <li>\ubaa8\ub4e0 \ud1b5\uc2e0 \ud504\ub85c\ud1a0\ucf5c\uc758 \uacf5\ud1b5 \ub3d9\uc791 \uc815\uc758</li> <li>\ucd94\uc0c1 \uba54\uc18c\ub4dc: <code>connect()</code>, <code>disconnect()</code></li> </ul> </li> <li>ReqResProtocol (BaseProtocol \uc0c1\uc18d)<ul> <li>\uc694\uccad/\uc751\ub2f5 \uae30\ubc18 \ud1b5\uc2e0 \ud504\ub85c\ud1a0\ucf5c \uc778\ud130\ud398\uc774\uc2a4</li> <li>\ucd94\uc0c1 \uba54\uc18c\ub4dc: <code>send()</code>, <code>read()</code></li> </ul> </li> <li>PubSubProtocol (BaseProtocol \uc0c1\uc18d)<ul> <li>\ubc1c\ud589/\uad6c\ub3c5 \uae30\ubc18 \ud1b5\uc2e0 \ud504\ub85c\ud1a0\ucf5c \uc778\ud130\ud398\uc774\uc2a4</li> <li>\ucd94\uc0c1 \uba54\uc18c\ub4dc: <code>publish()</code>, <code>subscribe()</code>, <code>unsubscribe()</code></li> </ul> </li> </ul>"},{"location":"#_13","title":"\ud604\uc7ac \uad6c\ud604\uccb4","text":"<ul> <li>MQTTProtocol<ul> <li><code>PubSubProtocol</code> \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604</li> <li>paho-mqtt \ub77c\uc774\ube0c\ub7ec\ub9ac \uae30\ubc18</li> <li>\uae30\ubcf8 MQTT \uae30\ub2a5 \uc9c0\uc6d0</li> </ul> </li> <li>TCPClient/TCPServer<ul> <li><code>ReqResProtocol</code> \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604</li> <li>TCP \ud074\ub77c\uc774\uc5b8\ud2b8/\uc11c\ubc84 \ud1b5\uc2e0 \uc9c0\uc6d0</li> </ul> </li> <li>SerialProtocol<ul> <li><code>ReqResProtocol</code> \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604</li> <li>\uc2dc\ub9ac\uc5bc \ud3ec\ud2b8 \ud1b5\uc2e0 \uc9c0\uc6d0</li> </ul> </li> <li>BrokerConfig &amp; ClientConfig<ul> <li>MQTT \uc5f0\uacb0 \uc124\uc815\uc744 \uc704\ud55c \ub370\uc774\ud130 \ud074\ub798\uc2a4</li> <li>\ube0c\ub85c\ucee4 \uc8fc\uc18c, \ud3ec\ud2b8, \uc778\uc99d \uc815\ubcf4 \ub4f1</li> </ul> </li> </ul>"},{"location":"#_14","title":"\ub370\uc774\ud130 \ud074\ub798\uc2a4","text":"<ul> <li>SendData (ABC)<ul> <li>\uc804\uc1a1 \ub370\uc774\ud130 \ucd94\uc0c1 \ud074\ub798\uc2a4</li> <li><code>to_bytes()</code> \uba54\uc11c\ub4dc \uad6c\ud604 \ud544\uc694</li> </ul> </li> <li>ReceivedData (ABC)<ul> <li>\uc218\uc2e0 \ub370\uc774\ud130 \ucd94\uc0c1 \ud074\ub798\uc2a4</li> <li><code>from_bytes()</code> \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc \uad6c\ud604 \ud544\uc694</li> </ul> </li> <li>PacketStructure<ul> <li>\ud328\ud0b7 \uad6c\uc870\ud654 \ubc0f \uc9c1\ub82c\ud654/\uc5ed\uc9c1\ub82c\ud654</li> <li>HEAD_PACKET, TAIL_PACKET \uae30\ubc18 \ud504\ub808\uc774\ubc0d</li> </ul> </li> </ul>"},{"location":"#_15","title":"\ub9e4\ub2c8\uc800 \uc2dc\uc2a4\ud15c","text":"<ul> <li>ReqResManager<ul> <li>ReqRes \ud504\ub85c\ud1a0\ucf5c \ud1b5\ud569 \uad00\ub9ac</li> <li><code>register(name, protocol)</code>: \ud504\ub85c\ud1a0\ucf5c \ub4f1\ub85d</li> <li><code>connect(name)</code>: \uc5f0\uacb0</li> <li><code>send(name, data)</code>: \ub370\uc774\ud130 \uc804\uc1a1 (int \ubc18\ud658)</li> <li><code>read(name)</code>: \ub370\uc774\ud130 \uc218\uc2e0 (bytes \ubc18\ud658)</li> <li><code>disconnect(name)</code>: \uc5f0\uacb0 \ud574\uc81c</li> </ul> </li> <li>PubSubManager<ul> <li>PubSub \ud504\ub85c\ud1a0\ucf5c \ud1b5\ud569 \uad00\ub9ac</li> <li><code>register(name, protocol)</code>: \ud504\ub85c\ud1a0\ucf5c \ub4f1\ub85d</li> <li><code>connect(name)</code>: \uc5f0\uacb0</li> <li><code>publish(name, topic, message)</code>: \uba54\uc2dc\uc9c0 \ubc1c\ud589</li> <li><code>subscribe(name, topic, callback)</code>: \ud1a0\ud53d \uad6c\ub3c5</li> <li><code>disconnect(name)</code>: \uc5f0\uacb0 \ud574\uc81c</li> </ul> </li> </ul>"},{"location":"#_16","title":"\uc608\uc678 \ucc98\ub9ac","text":"<ul> <li>ProtocolConnectionError: \uc5f0\uacb0 \uc2e4\ud328, \ud0c0\uc784\uc544\uc6c3</li> <li>ProtocolValidationError: \uba54\uc2dc\uc9c0 \ubc1c\ud589/\uad6c\ub3c5 \uc2e4\ud328</li> <li>ProtocolError: \uc77c\ubc18\uc801\uc778 \ud504\ub85c\ud1a0\ucf5c \uc624\ub958</li> <li>ProtocolAuthenticationError: \uc778\uc99d \uc2e4\ud328</li> <li>ProtocolTimeoutError: \ud0c0\uc784\uc544\uc6c3 \uc624\ub958</li> <li>ProtocolDecodeError: \ub514\ucf54\ub529 \uc624\ub958</li> </ul>"},{"location":"#_17","title":"\ud504\ub808\uc784\uc6cc\ud06c \ud655\uc7a5","text":"<p>\uc0c8\ub85c\uc6b4 \ud1b5\uc2e0 \ud504\ub85c\ud1a0\ucf5c\uc744 \ucd94\uac00\ud558\ub824\uba74 \uc801\uc808\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uc544 \uad6c\ud604\ud569\ub2c8\ub2e4.</p>"},{"location":"#reqres","title":"Req/Res \ud504\ub85c\ud1a0\ucf5c \ucd94\uac00","text":"<pre><code>from eq1_network.interfaces.protocol import ReqResProtocol\n\nclass TCPProtocol(ReqResProtocol):\n    def __init__(self, host: str, port: int):\n        self.host = host\n        self.port = port\n        self.socket = None\n\n    def connect(self) -&gt; bool:\n        # TCP \uc5f0\uacb0 \uad6c\ud604\n        pass\n\n    def disconnect(self):\n        # TCP \uc5f0\uacb0 \ud574\uc81c \uad6c\ud604\n        pass\n\n    def send(self, data: bytes) -&gt; bool:\n        # \ub370\uc774\ud130 \uc804\uc1a1 \uad6c\ud604\n        pass\n\n    def read(self) -&gt; Tuple[bool, Optional[bytes]]:\n        # \ub370\uc774\ud130 \uc218\uc2e0 \uad6c\ud604\n        pass\n</code></pre>"},{"location":"#pubsub","title":"Pub/Sub \ud504\ub85c\ud1a0\ucf5c \ucd94\uac00","text":"<pre><code>from eq1_network.interfaces.protocol import PubSubProtocol\n\nclass RedisProtocol(PubSubProtocol):\n    def publish(self, topic: str, message: str, qos: int = 0, retain: bool = False) -&gt; bool:\n        # Redis pub/sub \uad6c\ud604\n        pass\n\n    def subscribe(self, topic: str, callback, qos: int = 0) -&gt; bool:\n        # Redis \uad6c\ub3c5 \uad6c\ud604\n        pass\n</code></pre>"},{"location":"#_18","title":"\uc608\uc81c \ucf54\ub4dc","text":""},{"location":"#_19","title":"\uc885\ud569 \uc608\uc81c","text":"<p>\ud504\ub85c\uc81d\ud2b8\uc5d0\ub294 \uac01 \ud504\ub85c\ud1a0\ucf5c\ubcc4 \uc885\ud569 \uc608\uc81c\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4:</p> <ul> <li><code>examples/comprehensive_mqtt_example.py</code> - MQTT \uc885\ud569 \uc608\uc81c</li> <li><code>examples/comprehensive_tcp_example.py</code> - TCP \uc885\ud569 \uc608\uc81c</li> <li><code>examples/comprehensive_serial_example.py</code> - Serial \uc885\ud569 \uc608\uc81c</li> </ul>"},{"location":"#tcp-","title":"TCP \ud074\ub77c\uc774\uc5b8\ud2b8-\uc11c\ubc84 \uc608\uc81c","text":"<pre><code>import threading\nimport time\nfrom app import ReqResManager\nfrom eq1_network.protocols.ethernet.tcp_client import TCPClient\nfrom eq1_network.protocols.ethernet.tcp_server import TCPServer\n\n# \uc11c\ubc84 \uc2a4\ub808\ub4dc\ndef server_thread():\n    server = TCPServer(\"localhost\", 8080, timeout=1)\n    ReqResManager.register(\"server\", server)\n\n    if ReqResManager.connect(\"server\"):\n        print(\"Server started\")\n        while True:\n            data = ReqResManager.read(\"server\")\n            if data:\n                print(f\"Server received: {data.decode()}\")\n                ReqResManager.send(\"server\", b\"Server response\")\n            time.sleep(0.1)\n\n# \ud074\ub77c\uc774\uc5b8\ud2b8\ndef client_example():\n    client = TCPClient(\"localhost\", 8080, timeout=1)\n    ReqResManager.register(\"client\", client)\n\n    if ReqResManager.connect(\"client\"):\n        result = ReqResManager.send(\"client\", b\"Hello from client\")\n        if result &gt; 0:\n            response = ReqResManager.read(\"client\")\n            print(f\"Client received: {response.decode()}\")\n        ReqResManager.disconnect(\"client\")\n\n# \uc2e4\ud589\nserver = threading.Thread(target=server_thread, daemon=True)\nserver.start()\ntime.sleep(1)\nclient_example()\n</code></pre>"},{"location":"#serial_1","title":"Serial \ud1b5\uc2e0 \uc608\uc81c","text":"<pre><code>from app import ReqResManager\nfrom eq1_network.protocols.serial.serial_protocol import SerialProtocol\n\n# \uc2dc\ub9ac\uc5bc \ud504\ub85c\ud1a0\ucf5c \uc124\uc815\nserial = SerialProtocol(\"COM1\", 9600, timeout=1)\nReqResManager.register(\"serial\", serial)\n\nif ReqResManager.connect(\"serial\"):\n    # AT \uba85\ub839\uc5b4 \uc804\uc1a1\n    result = ReqResManager.send(\"serial\", b\"AT\\r\\n\")\n    if result &gt; 0:\n        response = ReqResManager.read(\"serial\")\n        print(f\"AT Response: {response.decode()}\")\n\n    # \ub370\uc774\ud130 \uc804\uc1a1\n    result = ReqResManager.send(\"serial\", b\"Hello Device\\r\\n\")\n    if result &gt; 0:\n        response = ReqResManager.read(\"serial\")\n        print(f\"Device Response: {response.decode()}\")\n\n    ReqResManager.disconnect(\"serial\")\n</code></pre>"},{"location":"#_20","title":"\ud14c\uc2a4\ud2b8","text":"<ul> <li>\ub2e8\uc704 \ud14c\uc2a4\ud2b8: Mock \uae30\ubc18 \uac1c\ubcc4 \uae30\ub2a5 \ud14c\uc2a4\ud2b8</li> <li>\ud1b5\ud569 \ud14c\uc2a4\ud2b8: \uc2e4\uc81c MQTT \ube0c\ub85c\ucee4, TCP, Serial\uacfc\uc758 \uc5f0\ub3d9 \ud14c\uc2a4\ud2b8</li> <li>E2E \ud14c\uc2a4\ud2b8: \uc2e4\uc81c \uc0ac\uc6a9 end-to-end \uc2dc\ub098\ub9ac\uc624 \ud14c\uc2a4\ud2b8</li> </ul>"},{"location":"#_21","title":"\ud14c\uc2a4\ud2b8 \uc2e4\ud589","text":"<pre><code># \uc804\uccb4 \ud14c\uc2a4\ud2b8\npytest tests/\n\n# \ub2e8\uc704 \ud14c\uc2a4\ud2b8\ub9cc\npytest tests/units/ -v\n\n# \ud1b5\ud569 \ud14c\uc2a4\ud2b8\ub9cc\npytest tests/integrations/ -v\n\n# MQTT \ud504\ub85c\ud1a0\ucf5c\ub9cc \ud14c\uc2a4\ud2b8\npytest tests/units/test_mqtt_protocol.py -v\n\n# TCP \ud504\ub85c\ud1a0\ucf5c\ub9cc \ud14c\uc2a4\ud2b8\npytest tests/units/test_tcp_protocol.py -v\n</code></pre>"},{"location":"#_22","title":"\ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0","text":"<p>\ud604\uc7ac \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0: 90%+ \ub2ec\uc131</p>"},{"location":"#_23","title":"\ub2e4\uc74c \ub2e8\uacc4","text":""},{"location":"#_24","title":"\ub2e8\uae30 \ub85c\ub4dc\ub9f5","text":"<ul> <li>TLS/SSL \ubcf4\uc548 \uc5f0\uacb0 \uc9c0\uc6d0</li> <li>Will Message \uae30\ub2a5 \ucd94\uac00</li> <li>\uc790\ub3d9 \uc7ac\uc5f0\uacb0 \uae30\ub2a5 \ucd94\uac00 \uac1c\uc120 (\uc7ac\uc2dc\ub3c4 \ud69f\uc218 \uc81c\ud55c, \uc0c1\ud0dc \ucf5c\ubc31 \ub4f1)</li> </ul>"},{"location":"#_25","title":"\uc7a5\uae30 \ub85c\ub4dc\ub9f5","text":"<ul> <li>Modbus \ud504\ub85c\ud1a0\ucf5c \ucd94\uac00</li> <li>\ud50c\ub7ec\uadf8\uc778 \ub9e4\ub2c8\uc800 \uac1c\ubc1c</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654 \ubc0f \ube44\ub3d9\uae30 \ucc98\ub9ac \uac15\ud654</li> </ul>"},{"location":"#_26","title":"\ucc38\uace0 \uc790\ub8cc","text":"<ul> <li>MQTT Protocol - MQTT \ud504\ub85c\ud1a0\ucf5c \uc0c1\uc138 \uac00\uc774\ub4dc</li> <li>PRD.md - \ud504\ub85c\uc81d\ud2b8 \uc694\uad6c\uc0ac\ud56d \ubc0f \uc124\uacc4 \ubb38\uc11c</li> </ul>"},{"location":"mqtt_protocol/","title":"MQTTProtocol \uc0ac\uc6a9 \uac00\uc774\ub4dc","text":"<p>MQTTProtocol\uc740 EQ-1 Network\uc758 MQTT Pub/Sub \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604\uccb4\uc785\ub2c8\ub2e4. MQTT \ube0c\ub85c\ucee4\uc640 \uc5f0\uacb0\ud558\uc5ec \uba54\uc2dc\uc9c0 \ubc1c\ud589(publish), \ud1a0\ud53d \uad6c\ub3c5(subscribe), \uc790\ub3d9 \uc7ac\uc5f0\uacb0 \ub4f1\uc758 \uae30\ubcf8 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"mqtt_protocol/#1","title":"1. \ube60\ub978 \uc2dc\uc791","text":""},{"location":"mqtt_protocol/#_1","title":"\uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":"<pre><code>from eq1_network.protocols.mqtt.mqtt_protocol import MQTTProtocol, BrokerConfig, ClientConfig\n\n# 1. \uc124\uc815 \uac1d\uccb4 \uc0dd\uc131\nbroker_config = BrokerConfig(\n    broker_address=\"broker.example.com\",\n    port=1883,\n    keepalive=60\n)\nclient_config = ClientConfig()\n\n# 2. \ud504\ub85c\ud1a0\ucf5c \uac1d\uccb4 \uc0dd\uc131\nmqtt = MQTTProtocol(broker_config, client_config)\n\n# 3. \ube0c\ub85c\ucee4 \uc5f0\uacb0 (\uba85\uc2dc\uc801 \ud638\ucd9c \ud544\uc694)\nmqtt.connect()\n\n# 4. \uba54\uc2dc\uc9c0 \ucf5c\ubc31 \ud568\uc218 \uc815\uc758\ndef message_callback(topic: str, payload: bytes):\n    print(f\"Received: [{topic}] {payload.decode()}\")\n\n# 5. \ud1a0\ud53d \uad6c\ub3c5\nmqtt.subscribe(\"topic/test\", message_callback)\n\n# 6. \uba54\uc2dc\uc9c0 \ubc1c\ud589\nmqtt.publish(\"topic/test\", \"hello\")\n\n# 7. \uc5f0\uacb0 \ud574\uc81c\nmqtt.disconnect()\n</code></pre>"},{"location":"mqtt_protocol/#_2","title":"\uc778\uc99d \uae30\ub2a5 \uc0ac\uc6a9\ubc95","text":"<pre><code>from eq1_network.protocols.mqtt.mqtt_protocol import MQTTProtocol, BrokerConfig, ClientConfig\n\n# \uc778\uc99d \uc124\uc815\nbroker_config = BrokerConfig(\n    broker_address=\"broker.example.com\",\n    port=1883,                  \n    username=\"mqtt_username\",  \n    password=\"mqtt_password\",  \n    keepalive=60             \n)\nclient_config = ClientConfig()\n\nmqtt = MQTTProtocol(broker_config, client_config)\nmqtt.connect()\n\n# Retained Message \ubc1c\ud589\nmqtt.publish(\"device/status\", \"online\", qos=1, retain=True)\n\nmqtt.disconnect()\n</code></pre>"},{"location":"mqtt_protocol/#clientconfig","title":"ClientConfig \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5","text":"<pre><code>from eq1_network.protocols.mqtt.mqtt_protocol import MQTTProtocol, BrokerConfig, ClientConfig\n\n# \uae30\ubcf8 \uc124\uc815\nbroker_config = BrokerConfig(broker_address=\"localhost\")\nclient_config = ClientConfig()  # \uc790\ub3d9 \uc0dd\uc131\ub41c client_id \uc0ac\uc6a9\n\n# \ucee4\uc2a4\ud140 \ud074\ub77c\uc774\uc5b8\ud2b8 ID \uc124\uc815\nclient_config = ClientConfig(\n    client_id=\"Device-A\",\n    clean_session=True,  # \uc0c8\ub85c\uc6b4 \uc138\uc158\uc73c\ub85c \uc2dc\uc791\n    userdata={\"device_type\": \"Sensor\", \"location\": \"Space-A\"}\n)\n\nmqtt = MQTTProtocol(broker_config, client_config)\nmqtt.connect()\n</code></pre>"},{"location":"mqtt_protocol/#2","title":"2. \uc8fc\uc694 \uac1c\ub150","text":""},{"location":"mqtt_protocol/#_3","title":"\ub3d9\uc791 \ubaa8\ub4dc","text":"<ul> <li>non-blocking (\uae30\ubcf8)<ul> <li><code>loop_start()</code> \uae30\ubc18</li> <li>\uc5f0\uacb0 \ud6c4 \ubcc4\ub3c4 \uc2a4\ub808\ub4dc\uc5d0\uc11c \ud1b5\uc2e0</li> <li>\uba54\uc778 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc790\uc720\ub86d\uac8c \uc791\uc5c5 \uac00\ub2a5</li> </ul> </li> <li>blocking<ul> <li><code>loop_forever()</code> \uae30\ubc18</li> <li>\uba54\uc778 \uc2a4\ub808\ub4dc \ube14\ub85d\ub428</li> </ul> </li> </ul>"},{"location":"mqtt_protocol/#_4","title":"\uc8fc\uc694 \uae30\ub2a5","text":""},{"location":"mqtt_protocol/#mqtt","title":"\uae30\ubcf8 MQTT \uae30\ub2a5","text":"<ul> <li>\ube0c\ub85c\ucee4 \uc5f0\uacb0/\ud574\uc81c</li> <li>\ud1a0\ud53d \uad6c\ub3c5 \ubc0f \uba54\uc2dc\uc9c0 \ucf5c\ubc31 \ucc98\ub9ac</li> <li>QoS 0, 1, 2 \uc9c0\uc6d0 \uba54\uc2dc\uc9c0 \ubc1c\ud589 (\uae30\ubcf8\uac12: QoS 0)</li> <li>\uc7ac\uc5f0\uacb0 \uc2dc \uad6c\ub3c5 \uc790\ub3d9 \ubcf5\uad6c</li> <li>\uc5f0\uacb0 \uc0c1\ud0dc \ud655\uc778 \uae30\ub2a5 (is_connected \ud504\ub85c\ud37c\ud2f0)</li> <li>\uc758\ub3c4\uce58 \uc54a\uc740 \uc5f0\uacb0 \uc2e4\ud328 \uc2dc, \uc790\ub3d9 \uc7ac\uc5f0\uacb0</li> </ul>"},{"location":"mqtt_protocol/#_5","title":"\uace0\uae09 \uae30\ub2a5","text":"<ul> <li>\uba54\uc2dc\uc9c0 \ud050\uc789: \uc5f0\uacb0 \ub2e8\uc808 \uc2dc \uba54\uc2dc\uc9c0\ub97c \ud050\uc5d0 \uc800\uc7a5\ud558\uace0 \uc7ac\uc5f0\uacb0 \uc2dc \uc790\ub3d9 \ubc1c\uc1a1</li> <li>\ub2e4\uc911 \ucf5c\ubc31 \uc9c0\uc6d0: \ud558\ub098\uc758 \ud1a0\ud53d\uc5d0 \uc5ec\ub7ec \ucf5c\ubc31 \ub4f1\ub85d \uac00\ub2a5</li> <li>\uc120\ud0dd\uc801 \uad6c\ub3c5 \ud574\uc81c: \ud2b9\uc815 \ucf5c\ubc31\ub9cc \uc81c\uac70\ud558\uac70\ub098 \uc804\uccb4 \ucf5c\ubc31 \uc81c\uac70 \uc120\ud0dd \uac00\ub2a5</li> <li>\ubcf4\uc548 \uc778\uc99d: username/password \uc778\uc99d \uc9c0\uc6d0</li> <li>Retained Messages: retain \ud50c\ub798\uadf8 \uc9c0\uc6d0</li> <li>\uc608\uc678 \ucc98\ub9ac: \uc5f0\uacb0, \ubc1c\ud589, \uad6c\ub3c5 \uc2e4\ud328 \uc608\uc678 \ucc98\ub9ac</li> <li>\ub85c\uae45: \uc8fc\uc694 \uc774\ubca4\ud2b8 \ub85c\uae45 \uc9c0\uc6d0</li> </ul>"},{"location":"mqtt_protocol/#3","title":"3. \ud074\ub798\uc2a4 \uad6c\uc870","text":"<pre><code>@dataclass\nclass BrokerConfig:\n    broker_address: str\n    port: int = 1883\n    keepalive: int = 60\n    bind_address: Optional[str] = None\n    mode: str = \"non-blocking\"\n    username: Optional[str] = None\n    password: Optional[str] = None\n\n@dataclass\nclass ClientConfig:\n    client_id: str = field(default_factory=lambda: f\"mqtt-{uuid4().hex}\")\n    clean_session: bool = False\n    userdata: Any = field(default_factory=dict)\n\nclass MQTTProtocol(PubSubProtocol):\n    def __init__(self, broker_config: BrokerConfig, client_config: ClientConfig)\n    def connect(self) -&gt; bool\n    def disconnect(self)\n    def publish(self, topic: str, message: str, qos: int = 0, retain: bool = False) -&gt; bool\n    def subscribe(self, topic: str, callback: Callable[[str, bytes], None], qos: int = 0) -&gt; bool\n    def unsubscribe(self, topic: str, callback: Callable[[str, bytes], None] = None) -&gt; bool\n    @property\n    def is_connected(self) -&gt; bool\n</code></pre>"},{"location":"mqtt_protocol/#brokerconfig","title":"BrokerConfig \ud30c\ub77c\ubbf8\ud130 \uc124\uba85","text":""},{"location":"mqtt_protocol/#_6","title":"\uae30\ubcf8 \uc5f0\uacb0 \uc124\uc815","text":"<ul> <li><code>broker_address</code> (str): \ube0c\ub85c\ucee4 \uc8fc\uc18c (IP \ub610\ub294 \ud638\uc2a4\ud2b8\uba85) - \ud544\uc218</li> <li><code>port</code> (int): MQTT \ud3ec\ud2b8 (\uae30\ubcf8 1883)</li> <li><code>keepalive</code> (int): Keep-alive \uac04\uaca9(\ucd08 \ub2e8\uc704, \uae30\ubcf8 60)</li> <li><code>bind_address</code> (Optional[str]): \ubc14\uc778\ub4dc \uc8fc\uc18c (\uc120\ud0dd \uc0ac\ud56d)</li> <li><code>mode</code> (str): 'blocking' \ub610\ub294 'non-blocking' (\uae30\ubcf8 'non-blocking')</li> </ul>"},{"location":"mqtt_protocol/#_7","title":"\ubcf4\uc548 \uc124\uc815","text":"<ul> <li><code>username</code> (Optional[str]): MQTT \uc778\uc99d \uc0ac\uc6a9\uc790\uba85</li> <li><code>password</code> (Optional[str]): MQTT \uc778\uc99d \ube44\ubc00\ubc88\ud638</li> </ul>"},{"location":"mqtt_protocol/#clientconfig_1","title":"ClientConfig \ud30c\ub77c\ubbf8\ud130 \uc124\uba85","text":"<ul> <li><code>client_id</code> (str): \ud074\ub77c\uc774\uc5b8\ud2b8 ID (\uae30\ubcf8\uac12: \uc790\ub3d9 \uc0dd\uc131)</li> <li><code>clean_session</code> (bool): \ud074\ub9b0 \uc138\uc158 \uc5ec\ubd80 (\uae30\ubcf8\uac12: False)</li> <li><code>userdata</code> (Any): \uc0ac\uc6a9\uc790 \uc815\uc758 \ub370\uc774\ud130 (\uae30\ubcf8\uac12: \ube48 \ub515\uc154\ub108\ub9ac)</li> </ul>"},{"location":"mqtt_protocol/#4","title":"4. \uace0\uae09 \ub3d9\uc791 \ubc29\uc2dd","text":""},{"location":"mqtt_protocol/#_8","title":"\uc790\ub3d9 \uc7ac\uc5f0\uacb0 \ubc0f \uad6c\ub3c5 \ubcf5\uad6c","text":"<ul> <li>\uc608\uae30\uce58 \ubabb\ud55c \uc5f0\uacb0 \ub04a\uae40 \uac10\uc9c0 \u2192 \uc790\ub3d9 \uc7ac\uc5f0\uacb0 \uc2dc\uc791</li> <li>\uc9c0\uc218 \ubc31\uc624\ud504 \uc7ac\uc2dc\ub3c4 (1\ucd08 \u2192 2\ucd08 \u2192 4\ucd08 \u2192 ... \ucd5c\ub300 60\ucd08)</li> <li>\uc7ac\uc5f0\uacb0 \uc131\uacf5 \u2192 \uae30\uc874 \uad6c\ub3c5 \uc815\ubcf4 \uc790\ub3d9 \ubcf5\uad6c</li> <li>\ubc1c\ud589 \uc2e4\ud328 \uc2dc \u2192 False \ubc18\ud658</li> </ul>"},{"location":"mqtt_protocol/#_9","title":"\uc2a4\ub808\ub4dc \ucc98\ub9ac","text":"<ul> <li>non-blocking \ubaa8\ub4dc: <code>loop_start()</code> \uc0ac\uc6a9</li> <li>blocking \ubaa8\ub4dc: \ubcc4\ub3c4 \uc2a4\ub808\ub4dc\uc5d0\uc11c <code>loop_forever()</code> \uc2e4\ud589</li> </ul>"},{"location":"mqtt_protocol/#_10","title":"\ucf5c\ubc31 \ud750\ub984","text":"<pre><code>sequenceDiagram\n    participant Broker\n    participant PahoClient\n    participant MQTTProtocol\n    participant UserCallback\n\n    Broker-&gt;&gt;PahoClient: \uba54\uc2dc\uc9c0 \uc218\uc2e0\n    PahoClient-&gt;&gt;MQTTProtocol: on_message \uc774\ubca4\ud2b8\n    MQTTProtocol-&gt;&gt;UserCallback: callback(topic, payload)\n</code></pre>"},{"location":"mqtt_protocol/#5","title":"5. \uc0ac\uc6a9 \ubc29\ubc95","text":""},{"location":"mqtt_protocol/#_11","title":"\uc5f0\uacb0 \ubc0f \uad6c\ub3c5","text":"<pre><code>def on_message(topic: str, payload: bytes):\n    print(f\"[{topic}] {payload.decode()}\")\n\nmqtt.connect()\nmqtt.subscribe(\"vision/events\", callback=on_message)\n</code></pre>"},{"location":"mqtt_protocol/#_12","title":"\uba54\uc2dc\uc9c0 \ubc1c\ud589","text":"<pre><code># \uae30\ubcf8 \uba54\uc2dc\uc9c0 \ubc1c\ud589 (QoS 0 \uae30\ubcf8\uac12)\nmqtt.publish(\"vision/events\", \"Camera started\")\n\n# QoS \ub808\ubca8 \uba85\uc2dc\uc801 \uc9c0\uc815\nmqtt.publish(\"vision/events\", \"Camera started\", qos=1)  # QoS 1\nmqtt.publish(\"vision/events\", \"Camera started\", qos=2)  # QoS 2\n\n# Retained Message \ubc1c\ud589\nmqtt.publish(\"device/status\", \"online\", qos=1, retain=True)\n</code></pre>"},{"location":"mqtt_protocol/#_13","title":"\uad6c\ub3c5 \ud574\uc81c","text":"<pre><code># \ud1a0\ud53d\uc758 \ubaa8\ub4e0 \ucf5c\ubc31 \uc81c\uac70 (\ube0c\ub85c\ucee4\uc5d0\uc11c\ub3c4 \uad6c\ub3c5 \ud574\uc81c)\nmqtt.unsubscribe(\"vision/events\")\n\n# \ud2b9\uc815 \ucf5c\ubc31\ub9cc \uc81c\uac70 (\ub2e4\ub978 \ucf5c\ubc31\uc774 \ub0a8\uc544\uc788\uc73c\uba74 \uad6c\ub3c5 \uc720\uc9c0)\nmqtt.unsubscribe(\"vision/events\", callback=on_message)\n</code></pre>"},{"location":"mqtt_protocol/#_14","title":"\ub2e4\uc911 \ucf5c\ubc31 \uc0ac\uc6a9","text":"<pre><code>def callback1(topic: str, payload: bytes):\n    print(f\"Callback1: [{topic}] {payload.decode()}\")\n\ndef callback2(topic: str, payload: bytes):\n    print(f\"Callback2: [{topic}] {payload.decode()}\")\n\n# \ub3d9\uc77c \ud1a0\ud53d\uc5d0 \uc5ec\ub7ec \ucf5c\ubc31 \ub4f1\ub85d\nmqtt.subscribe(\"sensor/data\", callback1)\nmqtt.subscribe(\"sensor/data\", callback2)  # \ub450 \ucf5c\ubc31 \ubaa8\ub450 \ud638\ucd9c\ub428\n\n# \ud2b9\uc815 \ucf5c\ubc31\ub9cc \uc81c\uac70\nmqtt.unsubscribe(\"sensor/data\", callback1)  # callback2\ub294 \uc5ec\uc804\ud788 \uc720\ud6a8\n</code></pre>"},{"location":"mqtt_protocol/#_15","title":"\uba54\uc2dc\uc9c0 \ud050\uc789 \ud65c\uc6a9","text":"<pre><code># \uc5f0\uacb0 \uc0c1\ud0dc\uc5d0\uc11c \uba54\uc2dc\uc9c0 \ubc1c\ud589\nresult = mqtt.publish(\"sensor/data\", \"normal_message\")\nprint(f\"Published: {result}\")  # True\n\n# \uc5f0\uacb0 \ub2e8\uc808 \ud6c4 \uba54\uc2dc\uc9c0 \ubc1c\ud589 (\ud050\uc5d0 \uc800\uc7a5)\nmqtt.disconnect()\nresult = mqtt.publish(\"sensor/data\", \"queued_message\")\nprint(f\"Queued: {result}\")  # False (\ud050\uc5d0 \uc800\uc7a5\ub428)\n\n# \uc7ac\uc5f0\uacb0 \uc2dc \ud050\uc5d0 \uc800\uc7a5\ub41c \uba54\uc2dc\uc9c0 \uc790\ub3d9 \ubc1c\uc1a1\nmqtt.connect()  # queued_message\uac00 \uc790\ub3d9\uc73c\ub85c \ubc1c\uc1a1\ub428\n</code></pre>"},{"location":"mqtt_protocol/#_16","title":"\uc5f0\uacb0 \ud574\uc81c","text":"<pre><code>mqtt.disconnect()\n</code></pre>"},{"location":"mqtt_protocol/#_17","title":"\uc608\uc678 \ucc98\ub9ac","text":""},{"location":"mqtt_protocol/#_18","title":"\uc8fc\uc694 \uc608\uc678 \ud074\ub798\uc2a4:","text":"<ul> <li><code>ProtocolConnectionError</code>: \ube0c\ub85c\ucee4 \uc5f0\uacb0 \uc2e4\ud328</li> <li><code>ProtocolValidationError</code>: \uba54\uc2dc\uc9c0 \ubc1c\ud589/\uad6c\ub3c5 \uc2e4\ud328</li> <li><code>ProtocolError</code>: \uc77c\ubc18\uc801\uc778 \ud504\ub85c\ud1a0\ucf5c \uc624\ub958</li> </ul>"},{"location":"mqtt_protocol/#_19","title":"\uc608\uc678 \ucc98\ub9ac \uc608\uc2dc:","text":"<pre><code>from eq1_network.common.exception import (\n    ProtocolConnectionError,\n    ProtocolValidationError,\n    ProtocolError\n)\n\ntry:\n    mqtt.connect()\nexcept ProtocolConnectionError as e:\n    print(f\"Connection failed: {e}\")\n\ntry:\n    mqtt.subscribe(\"test/topic\", callback)\nexcept ProtocolValidationError as e:\n    print(f\"Subscribe failed: {e}\")\n</code></pre>"},{"location":"mqtt_protocol/#6","title":"6. \ud14c\uc2a4\ud2b8 \ubc29\ubc95","text":""},{"location":"mqtt_protocol/#_20","title":"\ub2e8\uc704 \ud14c\uc2a4\ud2b8","text":"<pre><code># Mock \uae30\ubc18 \ub2e8\uc704 \ud14c\uc2a4\ud2b8\npytest -m \"unit\" -v\n</code></pre>"},{"location":"mqtt_protocol/#_21","title":"\ud1b5\ud569 \ud14c\uc2a4\ud2b8","text":"<pre><code># \uc2e4\uc81c \ube0c\ub85c\ucee4\uc640 \uc5f0\ub3d9 \ud14c\uc2a4\ud2b8\npytest -m \"integration\" -v\n</code></pre>"},{"location":"mqtt_protocol/#7","title":"7. \ud604\uc7ac \uad6c\ud604 \uc218\uc900","text":"<p>\ud604\uc7ac \uad6c\ud604\uc740 MQTT v3.1.1 \uae30\ubcf8 \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4:</p>"},{"location":"mqtt_protocol/#_22","title":"\u2705 \uc644\uc804 \uc9c0\uc6d0","text":"<ul> <li>\uae30\ubcf8 MQTT \uae30\ub2a5 (CONNECT, DISCONNECT, PUBLISH, SUBSCRIBE)</li> <li>QoS 0, 1, 2 \ub808\ubca8 \uc644\uc804 \uc9c0\uc6d0</li> <li>Keep-alive \uba54\ucee4\ub2c8\uc998</li> <li>Username/Password \uc778\uc99d</li> <li>Retained Messages</li> <li>\uc608\uae30\uce58 \ubabb\ud55c \uc5f0\uacb0 \uc2e4\ud328 \uc2dc \uc790\ub3d9 \uc7ac\uc5f0\uacb0 (\uc9c0\uc218 \ubc31\uc624\ud504)</li> <li>\uc7ac\uc5f0\uacb0 \uc2dc \uad6c\ub3c5 \ubcf5\uad6c</li> <li>\uc5f0\uacb0 \uc2e4\ud328 \uc2dc \uba54\uc2dc\uc9c0 \ud050\uc789 (\ub370\uc774\ud130 \uc720\uc2e4 \ubc29\uc9c0)</li> <li>\ub2e4\uc911 \ucf5c\ubc31 \uc9c0\uc6d0 (\ud1a0\ud53d\ub2f9 \uc5ec\ub7ec \ucf5c\ubc31 \ub4f1\ub85d \uac00\ub2a5)</li> <li>\uc120\ud0dd\uc801 \uad6c\ub3c5 \ud574\uc81c (\ud2b9\uc815 \ucf5c\ubc31\ub9cc \uc81c\uac70 \uac00\ub2a5)</li> <li>\uc2a4\ub808\ub4dc \uc548\uc804\uc131 (\ub0b4\ubd80 \ub3d9\uae30\ud654 \ubc0f \ub77d \ucc98\ub9ac)</li> <li>\uc608\uc678 \ucc98\ub9ac \ubc0f \ub85c\uae45</li> </ul>"},{"location":"mqtt_protocol/#_23","title":"\ud83d\udd04 \ubbf8\uad6c\ud604 \uae30\ub2a5","text":"<ul> <li>TLS/SSL \ubcf4\uc548 \uc5f0\uacb0</li> <li>Will Message (Last Will and Testament)</li> <li>MQTT v5.0 \uae30\ub2a5\ub4e4 (Shared Subscriptions, Message Expiry \ub4f1)</li> <li>\ube44\ub3d9\uae30 \ucf5c\ubc31 (async/await \ud328\ud134)</li> </ul>"},{"location":"mqtt_protocol/#8","title":"8. \ucc38\uace0 \uc790\ub8cc","text":"<ul> <li>README.md - \ud504\ub85c\uc81d\ud2b8 \uc804\uccb4 \uac1c\uc694</li> <li>PRD.md - \ud504\ub85c\uc81d\ud2b8 \uc694\uad6c\uc0ac\ud56d \ubb38\uc11c</li> </ul>"},{"location":"prd/","title":"\uc81c\ud488 \uc694\uad6c\uc0ac\ud56d \ubb38\uc11c: EQ-1 Network","text":"<p>EQ-1 Network\ub294 \ub2e4\uc591\ud55c \uc0b0\uc5c5 \ubc0f IoT \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud50c\ub7ec\uadf8\uc778 \uae30\ubc18 \ud1b5\uc2e0 \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4.</p>"},{"location":"prd/#_1","title":"\ubb38\uc11c \ubaa9\uc801","text":"<p>\uc774 \ubb38\uc11c\ub294 EQ-1 Network\uc758 \ubaa9\uc801, \uc694\uad6c\uc0ac\ud56d, \uc124\uacc4 \ubc29\ud5a5, \uc81c\uc57d\uc0ac\ud56d\uc744 \uba85\ud655\ud788 \uc815\uc758\ud558\uc5ec \ud300 \ub0b4 \uacf5\ud1b5\ub41c \uc774\ud574\ub97c \ub3d5\uc2b5\ub2c8\ub2e4.</p>"},{"location":"prd/#_2","title":"\uac1c\uc694","text":"<ul> <li>MQTT, TCP, Serial\uc744 \uc2dc\uc791\uc73c\ub85c \ub2e4\uc591\ud55c \ud1b5\uc2e0 \ud504\ub85c\ud1a0\ucf5c\uc744 \ud45c\uc900\ud654\ub41c \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc9c0\uc6d0\ud569\ub2c8\ub2e4.</li> <li>\uc2e0\uaddc \ud504\ub85c\ud1a0\ucf5c\uc744 \ud50c\ub7ec\uadf8\uc778 \ubc29\uc2dd\uc73c\ub85c \uc27d\uac8c \ud655\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uacf5\ud1b5 ReqRes / PubSub \uc778\ud130\ud398\uc774\uc2a4\uc640 \uc77c\uad00\ub41c \uc9c1\ub82c\ud654 \uaddc\uce59\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</li> <li>Core-Network \uc5f0\ub3d9: PacketStructureInterface \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud55c \ud45c\uc900\ud654\ub41c \ud328\ud0b7 \ucc98\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"prd/#_3","title":"\uc544\ud0a4\ud14d\ucc98 \ub2e4\uc774\uc544\uadf8\ub7a8","text":"<pre><code>flowchart TD\n    subgraph Application[\"\uc751\uc6a9 \uc2dc\uc2a4\ud15c\"]\n        UI[\"UI / Vision System\"] --&gt; NET[\"EQ-1 Network \ubaa8\ub4c8\"]\n    end\n\n    NET --&gt; MANAGER[\"Protocol Manager\"]\n    MANAGER --&gt; INTERFACES[\"ReqRes / PubSub Interfaces\"]\n    INTERFACES --&gt; PACKET[\"PacketStructureInterface\"]\n    INTERFACES --&gt; PROTOCOLS[\"Protocol Plugins\"]\n\n    PROTOCOLS --&gt; MQTT[\"MQTTProtocol\"]\n    PROTOCOLS --&gt; TCP[\"TCPClient/TCPServer\"]\n    PROTOCOLS --&gt; SERIAL[\"SerialProtocol\"]\n    PROTOCOLS --&gt; MODBUS[(Future) ModbusProtocol]\n\n    PACKET --&gt; SENDDATA[\"SendData\"]\n    PACKET --&gt; RECEIVEDDATA[\"ReceivedData\"]\n    PACKET --&gt; NETWORKHANDLER[\"NetworkHandler\"]\n</code></pre>"},{"location":"prd/#_4","title":"\ubaa9\ud45c","text":"<ul> <li>\uc2e0\uaddc \ud504\ub85c\ud1a0\ucf5c\uc744 \ud50c\ub7ec\uadf8\uc778 \ud615\ud0dc\ub85c \uc27d\uac8c \ud655\uc7a5</li> <li>\uacf5\ud1b5 \uc778\ud130\ud398\uc774\uc2a4(ReqRes, PubSub) \uc81c\uacf5</li> <li>\uc77c\uad00\ub41c \ud328\ud0b7 \uc9c1\ub82c\ud654/\uc5ed\uc9c1\ub82c\ud654 \uaddc\uce59 \ud655\ub9bd</li> <li>Core-Network \uc5f0\ub3d9: \ud45c\uc900\ud654\ub41c \ud328\ud0b7 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud55c \ub370\uc774\ud130 \ucc98\ub9ac \ud1b5\ud569</li> </ul>"},{"location":"prd/#_5","title":"\ubc30\uacbd","text":"<ul> <li>\uae30\uc874 \uc2dc\uc2a4\ud15c\ubcc4 \ud1b5\uc2e0 \uad6c\ud604 \uc911\ubcf5</li> <li>MQTT, TCP/UDP, Serial, Modbus \ub4f1 \uc5ec\ub7ec \ud504\ub85c\ud1a0\ucf5c\uc744 \ud558\ub098\uc758 \ucf54\ub4dc\ubca0\uc774\uc2a4\ub85c \uad00\ub9ac\ud560 \ud544\uc694\uc131 \uc874\uc7ac</li> <li>Core-Network \uc5f0\ub3d9 \ud544\uc694\uc131: \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud0c0\uc785(List, Dict \ub4f1)\uc744 \uc77c\uad00\ub41c \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ud45c\uc900 \uc778\ud130\ud398\uc774\uc2a4 \ud544\uc694</li> </ul>"},{"location":"prd/#_6","title":"\uc131\uacf5 \uc9c0\ud45c","text":""},{"location":"prd/#_7","title":"\ud604\uc7ac \uc0c1\ud0dc","text":"<ul> <li>\uac1c\ubc1c \uc18d\ub3c4: \u2705 \ub2ec\uc131 - MQTT v3.1.1, TCP, Serial \uae30\ubcf8 \uae30\ub2a5 \uad6c\ud604 \uc644\ub8cc</li> <li>\ud488\uc9c8 \uc9c0\ud45c: \u2705 \ub2ec\uc131 - \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0 90%+ \ub2ec\uc131</li> <li>MQTT \uae30\ubcf8 \uae30\ub2a5: \u2705 \ub2ec\uc131 - MQTT v3.1.1 \uae30\ubcf8 \ud45c\uc900 \uc900\uc218</li> <li>TCP \ud504\ub85c\ud1a0\ucf5c: \u2705 \uad6c\ud604\ub428 - TCPClient/TCPServer \ud074\ub798\uc2a4 \uad6c\ud604 \uc644\ub8cc</li> <li>Serial \ud504\ub85c\ud1a0\ucf5c: \u2705 \uad6c\ud604\ub428 - SerialProtocol \ud074\ub798\uc2a4 \uad6c\ud604 \uc644\ub8cc</li> <li>\ub370\uc774\ud130 \ud074\ub798\uc2a4: \u2705 \uad6c\ud604\ub428 - SendData, ReceivedData, PacketStructure \ud074\ub798\uc2a4 \uad6c\ud604 \uc644\ub8cc</li> <li>\uc778\ud130\ud398\uc774\uc2a4: \u2705 \uad6c\ud604\ub428 - BaseProtocol, ReqResProtocol, PubSubProtocol \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604</li> <li>\uc608\uc678 \ucc98\ub9ac: \u2705 \uad6c\ud604\ub428 - ProtocolError \uacc4\uce35 \uad6c\uc870 \uad6c\ud604</li> <li>\uc6cc\ucee4 \ubaa8\ub4c8: \u2705 \uad6c\ud604\ub428 - Listener, Requester \uc2a4\ub808\ub4dc \uae30\ubc18 \uc6cc\ucee4 \uad6c\ud604</li> <li>\ub9e4\ub2c8\uc800 \uc2dc\uc2a4\ud15c: \u2705 \uad6c\ud604\ub428 - ReqResManager, PubSubManager \uad6c\ud604 \uc644\ub8cc</li> </ul>"},{"location":"prd/#_8","title":"\uc9c0\uc18d\uc801 \ubaa9\ud45c","text":"<ul> <li>\uc548\uc815\uc131: 3\uac1c\uc6d4\uac04 \uce58\uba85\uc801 \ud1b5\uc2e0 \ubc84\uadf8 0\uac74 \uc720\uc9c0</li> <li>\uc131\ub2a5: \ucd08\ub2f9 10,000 \uba54\uc2dc\uc9c0 \ucc98\ub9ac \uc131\ub2a5 \uc720\uc9c0</li> <li>\ud655\uc7a5\uc131: 6\uac1c\uc6d4 \ub0b4 Modbus \ud504\ub85c\ud1a0\ucf5c \ucd94\uac00</li> </ul>"},{"location":"prd/#_9","title":"\ubc94\uc704","text":""},{"location":"prd/#_10","title":"\ud3ec\ud568 \uc0ac\ud56d","text":"<ul> <li>\ud1b5\uc2e0 \ud504\ub85c\ud1a0\ucf5c \uacf5\ud1b5 \uc778\ud130\ud398\uc774\uc2a4</li> <li>\ud328\ud0b7 \uad6c\uc870\ud654 \ubc0f \uc9c1\ub82c\ud654</li> <li>MQTT \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604 (PubSub)</li> <li>TCP \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604 (ReqRes) - \ud074\ub77c\uc774\uc5b8\ud2b8/\uc11c\ubc84</li> <li>Serial \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604 (ReqRes)</li> <li>\ub2e8\uc704 \ud14c\uc2a4\ud2b8 \ubc0f \uc0d8\ud50c \uc608\uc81c</li> <li>PacketStructureInterface \uc778\ud130\ud398\uc774\uc2a4 \uad6c\ud604</li> <li>SendData/ReceivedData \ud074\ub798\uc2a4 \uad6c\ud604</li> <li>NetworkHandler \ud074\ub798\uc2a4 \uad6c\ud604</li> <li>Listener/Requester \uc6cc\ucee4 \ubaa8\ub4c8 \uad6c\ud604</li> <li>ReqResManager/PubSubManager \uad6c\ud604</li> <li>NetworkPacketStructure \ubc0f \ub2e4\uc911 \ud3ec\ub9f7 \uba54\uc2dc\uc9c0 \uc9c0\uc6d0</li> <li>DataPackage \ud1b5\ud569 \uad00\ub9ac \uc2dc\uc2a4\ud15c</li> </ul>"},{"location":"prd/#_11","title":"\uc81c\uc678 \uc0ac\ud56d","text":"<ul> <li>UI (GUI, Web)</li> <li>\ub370\uc774\ud130 \uc800\uc7a5\uc18c, \uc11c\ube44\uc2a4 \ub85c\uc9c1</li> <li>\ubc30\ud3ec/\uc6b4\uc601 \uc790\ub3d9\ud654</li> </ul>"},{"location":"prd/#_12","title":"\uae30\ub2a5 \uc694\uad6c\uc0ac\ud56d","text":"ID \uc694\uad6c\uc0ac\ud56d \uc0c1\uc138 F-01 \ud50c\ub7ec\uadf8\uc778 \uae30\ubc18 \ud1b5\uc2e0 \ubaa8\ub4c8 - <code>BaseProtocol</code> \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0c1\uc18d\ud55c \ud074\ub798\uc2a4\ub97c <code>protocols</code> \ub514\ub809\ud1a0\ub9ac\uc5d0 \ucd94\uac00\ud558\ub294 \uac83\ub9cc\uc73c\ub85c \uc2e0\uaddc \ud504\ub85c\ud1a0\ucf5c\uc774 \ud655\uc7a5\ub418\uc5b4\uc57c \ud568.- <code>ProtocolManager</code>\ub294 \uc9c0\uc815\ub41c \uacbd\ub85c\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ud504\ub85c\ud1a0\ucf5c\uc744 \ub3d9\uc801\uc73c\ub85c \ud0d0\uc0c9\ud558\uace0 \ub85c\ub4dc\ud574\uc57c \ud568. F-02 ReqRes \uc778\ud130\ud398\uc774\uc2a4 - <code>ReqResProtocol</code> \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \ub2e4\uc74c \uba54\uc11c\ub4dc\ub97c \ubc18\ub4dc\uc2dc \ud3ec\ud568\ud574\uc57c \ud568:  - <code>connect()</code> / <code>disconnect()</code>: \ub300\uc0c1\uacfc\uc758 \uc5f0\uacb0 \uc218\ub9bd \ubc0f \uc885\ub8cc  - <code>send(data: bytes) -&gt; int</code>: \ub370\uc774\ud130 \ub3d9\uae30 \uc804\uc1a1 (\uc804\uc1a1\ub41c \ubc14\uc774\ud2b8 \uc218 \ubc18\ud658)  - <code>read() -&gt; Tuple[bool, Optional[bytes]]</code>: \uc751\ub2f5 \ub370\uc774\ud130 \uc218\uc2e0 (Non-blocking)  - <code>is_connected() -&gt; bool</code>: \uc5f0\uacb0 \uc0c1\ud0dc \ubc18\ud658 F-03 PubSub \uc778\ud130\ud398\uc774\uc2a4 - <code>PubSubProtocol</code> \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \ub2e4\uc74c \uba54\uc11c\ub4dc\ub97c \ubc18\ub4dc\uc2dc \ud3ec\ud568\ud574\uc57c \ud568:  - <code>connect()</code> / <code>disconnect()</code>: \ube0c\ub85c\ucee4\uc640\uc758 \uc5f0\uacb0 \uc218\ub9bd \ubc0f \uc885\ub8cc  - <code>publish(topic: str, message: str, qos: int, retain: bool)</code>: \uba54\uc2dc\uc9c0 \ubc1c\ud589  - <code>subscribe(topic: str, callback: Callable)</code>: \ud1a0\ud53d \uad6c\ub3c5 \ubc0f \ucf5c\ubc31 \ub4f1\ub85d  - <code>unsubscribe(topic: str, callback: Callable)</code>: \ud1a0\ud53d \uad6c\ub3c5 \ucde8\uc18c F-04 PacketStructure - \ubaa8\ub4e0 \ud1b5\uc2e0 \ub370\uc774\ud130\ub294 <code>PacketStructure</code> \ud074\ub798\uc2a4\ub97c \ud1b5\ud574 \ucc98\ub9ac.- <code>to_packet(data: bytes) -&gt; bytes</code>: \ub370\uc774\ud130\ub97c \ud328\ud0b7\uc73c\ub85c \uc9c1\ub82c\ud654.- <code>from_packet(packet: bytes) -&gt; bytes</code>: \ud328\ud0b7\uc744 \ub370\uc774\ud130\ub85c \uc5ed\uc9c1\ub82c\ud654.- <code>is_valid(packet: bytes) -&gt; bool</code>: \ud328\ud0b7 \uc720\ud6a8\uc131 \uac80\uc0ac.- <code>split_packet(packet: bytes) -&gt; list[bytes]</code>: \ud328\ud0b7 \ubd84\ud560. F-05 RFC \uc900\uc218 MQTTProtocol \uad6c\ud604 - <code>PubSubProtocol</code> \uc778\ud130\ud398\uc774\uc2a4\ub97c <code>paho-mqtt</code> \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \uad6c\ud604.- \ud604\uc7ac \uad6c\ud604: Username/Password \uc778\uc99d, Retained Messages- \ud604\uc7ac \uad6c\ud604: \uc608\uae30\uce58 \ubabb\ud55c \uc5f0\uacb0 \uc2e4\ud328 \uc2dc \uc790\ub3d9 \uc7ac\uc5f0\uacb0 (\uc9c0\uc218 \ubc31\uc624\ud504)- \ud604\uc7ac \uad6c\ud604: \uc7ac\uc5f0\uacb0 \uc2dc \uad6c\ub3c5 \uc790\ub3d9 \ubcf5\uad6c \ubc0f \uba54\uc2dc\uc9c0 \ud050 \ucc98\ub9ac- \ud604\uc7ac \uad6c\ud604: QoS (0, 1, 2) \ub808\ubca8 \uc644\uc804 \uc9c0\uc6d0- \ud604\uc7ac \uad6c\ud604: \uc0c1\uc138\ud55c RFC \uc900\uc218 \uc5d0\ub7ec \ucc98\ub9ac F-06 TCP \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604 - <code>ReqResProtocol</code> \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud55c TCPClient/TCPServer \ud074\ub798\uc2a4- \ud604\uc7ac \uad6c\ud604: TCP \ud074\ub77c\uc774\uc5b8\ud2b8/\uc11c\ubc84 \ud1b5\uc2e0 \uc9c0\uc6d0- \ud604\uc7ac \uad6c\ud604: \ubc14\uc774\ub108\ub9ac/\ud14d\uc2a4\ud2b8 \ub370\uc774\ud130 \uc1a1\uc218\uc2e0- \ud604\uc7ac \uad6c\ud604: \ud0c0\uc784\uc544\uc6c3 \uc124\uc815 \ubc0f \uc5f0\uacb0 \uad00\ub9ac- \ud604\uc7ac \uad6c\ud604: JSON \ub370\uc774\ud130 \uad6c\uc870\ud654 \uc9c0\uc6d0 F-07 Serial \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604 - <code>ReqResProtocol</code> \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud55c SerialProtocol \ud074\ub798\uc2a4- \ud604\uc7ac \uad6c\ud604: \uc2dc\ub9ac\uc5bc \ud3ec\ud2b8 \ud1b5\uc2e0 \uc9c0\uc6d0- \ud604\uc7ac \uad6c\ud604: \ub2e4\uc591\ud55c \ubcf4\ub4dc\ub808\uc774\ud2b8 \uc124\uc815- \ud604\uc7ac \uad6c\ud604: \ubc14\uc774\ub108\ub9ac/\ud14d\uc2a4\ud2b8 \ub370\uc774\ud130 \uc1a1\uc218\uc2e0- \ud604\uc7ac \uad6c\ud604: AT \uba85\ub839\uc5b4 \uc9c0\uc6d0 F-08 Thread-safe \ubcf4\uc7a5 - publish, subscribe, unsubscribe, \ud050 \ucc98\ub9ac \ub4f1 \ubaa8\ub4e0 API\uac00 thread-safe\ud574\uc57c \ud568 F-09 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc \uc81c\uacf5 - <code>pytest</code>\uc640 <code>unittest.mock</code>\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac01 \ucef4\ud3ec\ub10c\ud2b8\uc758 \ub3c5\ub9bd\uc801\uc778 \ub3d9\uc791\uc744 \uac80\uc99d.- <code>MQTTProtocol</code> \ud14c\uc2a4\ud2b8\ub97c \uc704\ud574 Mock MQTT \ube0c\ub85c\ucee4\ub97c \uc0ac\uc6a9.- CI \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589 \uac00\ub2a5\ud574\uc57c \ud558\uba70, \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 90% \uc774\uc0c1\uc744 \ubaa9\ud45c\ub85c \ud568. F-10 PacketStructureInterface \uc778\ud130\ud398\uc774\uc2a4 - <code>abc.ABC</code> \uae30\ubc18\uc758 <code>PacketStructureInterface</code> \ucd94\uc0c1 \ud074\ub798\uc2a4 \uad6c\ud604- <code>to_packet(data: bytes) -&gt; bytes</code>: \ub370\uc774\ud130\ub97c \ud328\ud0b7\uc73c\ub85c \uc9c1\ub82c\ud654- <code>from_packet(packet: bytes) -&gt; bytes</code>: \ud328\ud0b7\uc744 \ub370\uc774\ud130\ub85c \uc5ed\uc9c1\ub82c\ud654- <code>is_valid(packet: bytes) -&gt; bool</code>: \ud328\ud0b7 \uc720\ud6a8\uc131 \uac80\uc0ac- <code>split_packet(packet: bytes) -&gt; list[bytes]</code>: \ud328\ud0b7 \ubd84\ud560 F-11 SendData \ud074\ub798\uc2a4 \uad6c\ud604 - <code>abc.ABC</code> \uae30\ubc18\uc758 <code>SendData</code> \ucd94\uc0c1 \ud074\ub798\uc2a4 \uad6c\ud604- <code>to_bytes() -&gt; bytes</code>: \uac1d\uccb4\ub97c \uc804\uc1a1 \uac00\ub2a5\ud55c \ubc14\uc774\ud2b8\ub85c \uc9c1\ub82c\ud654 F-12 ReceivedData \ud074\ub798\uc2a4 \uad6c\ud604 - <code>abc.ABC</code> \uae30\ubc18\uc758 <code>ReceivedData</code> \ucd94\uc0c1 \ud074\ub798\uc2a4 \uad6c\ud604- <code>from_bytes(data: bytes) -&gt; Self</code>: \ubc14\uc774\ud2b8 \ub370\uc774\ud130\ub97c \uac1d\uccb4\ub85c \uc5ed\uc9c1\ub82c\ud654 F-13 NetworkHandler \ud074\ub798\uc2a4 \uad6c\ud604 - <code>send</code>, <code>receive</code> \uba54\uc11c\ub4dc\uac00 \ud3ec\ud568\ub41c \ud074\ub798\uc2a4 \uad6c\ucd95- Listener, Requester \uc6cc\ucee4 \ubaa8\ub4c8\uacfc \uc5f0\ub3d9 F-14 \uc6cc\ucee4 \ubaa8\ub4c8 \uad6c\ud604 - Listener: \uc218\uc2e0 \ucc98\ub9ac \uc2a4\ub808\ub4dc- Requester: \uc1a1\uc2e0 \ucc98\ub9ac \uc2a4\ub808\ub4dc- \uc774\ubca4\ud2b8 \uae30\ubc18 \ucf5c\ubc31 \ucc98\ub9ac F-15 \ub9e4\ub2c8\uc800 \uc2dc\uc2a4\ud15c \uad6c\ud604 - ReqResManager: ReqRes \ud504\ub85c\ud1a0\ucf5c \ud1b5\ud569 \uad00\ub9ac  - <code>register(name, protocol)</code>: \ud504\ub85c\ud1a0\ucf5c \ub4f1\ub85d  - <code>send(name, data) -&gt; int</code>: \ub370\uc774\ud130 \uc804\uc1a1 (\uc804\uc1a1\ub41c \ubc14\uc774\ud2b8 \uc218 \ubc18\ud658)  - <code>read(name) -&gt; bytes</code>: \ub370\uc774\ud130 \uc218\uc2e0 (bytes \ubc18\ud658)- PubSubManager: PubSub \ud504\ub85c\ud1a0\ucf5c \ud1b5\ud569 \uad00\ub9ac  - <code>register(name, protocol)</code>: \ud504\ub85c\ud1a0\ucf5c \ub4f1\ub85d  - <code>publish(name, topic, message)</code>: \uba54\uc2dc\uc9c0 \ubc1c\ud589  - <code>subscribe(name, topic, callback)</code>: \ud1a0\ud53d \uad6c\ub3c5- \ud50c\ub7ec\uadf8\uc778 \ub4f1\ub85d/\uad00\ub9ac \uae30\ub2a5 F-16 NetworkPacketStructure \uad6c\ud604 - <code>PacketStructureInterface</code>\ub97c \uad6c\ud604\ud55c <code>NetworkPacketStructure</code> \ud074\ub798\uc2a4- 4\ubc14\uc774\ud2b8 \ud5e4\ub354 \uae30\ubc18 \ud328\ud0b7 \uad6c\uc870 (\ube45\uc5d4\ub514\uc548)- \ucd5c\ub300 1MB \ud398\uc774\ub85c\ub4dc \ud06c\uae30 \uc81c\ud55c- \ud328\ud0b7 \ubd84\ud560 \ubc0f \ubcd1\ud569 \uae30\ub2a5- \uba54\uc2dc\uc9c0 \ud0c0\uc785\ubcc4 \uc9c1\ub82c\ud654/\uc5ed\uc9c1\ub82c\ud654 \uc9c0\uc6d0 F-17 \ub2e4\uc911 \ud3ec\ub9f7 \uba54\uc2dc\uc9c0 \uc9c0\uc6d0 - TEXT, BINARY, INT \ud3ec\ub9f7 \uc9c0\uc6d0- \uac01 \ud3ec\ub9f7\ubcc4 SendData/ReceivedData \ud074\ub798\uc2a4 \uad6c\ud604- \uba54\uc2dc\uc9c0 \ud0c0\uc785 \uc815\uc758 (COMMAND, DATA, RESPONSE, STATUS, ERROR, HEARTBEAT, FILE_TRANSFER, BULK_DATA)- \ud0c0\uc784\uc2a4\ud0ec\ud504, \uc18c\uc2a4/\ubaa9\uc801\uc9c0 \uc815\ubcf4 \ud3ec\ud568 F-18 DataPackage \ud1b5\ud569 \uad00\ub9ac - \ud328\ud0b7 \uad6c\uc870\uc640 \ub370\uc774\ud130 \ud074\ub798\uc2a4\ub97c \ubb36\uc740 <code>DataPackage</code> \ud074\ub798\uc2a4- \ud3ec\ub9f7\ubcc4 \uc0ac\uc804 \uc815\uc758\ub41c \ud328\ud0a4\uc9c0 (TEXT_PACKAGE, BINARY_PACKAGE, INT_PACKAGE)- \uc77c\uad00\ub41c \ub370\uc774\ud130 \ucc98\ub9ac \uc778\ud130\ud398\uc774\uc2a4 \uc81c\uacf5"},{"location":"prd/#_13","title":"\ube44\uae30\ub2a5 \uc694\uad6c\uc0ac\ud56d","text":"ID \uc694\uad6c\uc0ac\ud56d \uc0c1\uc138 NF-01 \ud655\uc7a5\uc131 - OCP (\uac1c\ubc29-\ud3d0\uc1c4 \uc6d0\uce59): \uc0c8\ub85c\uc6b4 \ud504\ub85c\ud1a0\ucf5c \ucd94\uac00 \uc2dc, \uae30\uc874 \ud575\uc2ec \ucf54\ub4dc(<code>manager</code>, <code>interfaces</code> \ub4f1)\uc758 \uc218\uc815 \uc5c6\uc774 \ud655\uc7a5 \uac00\ub2a5\ud574\uc57c \ud568.- \uac1c\ubc1c\uc790\ub294 \uc815\uc758\ub41c \ud504\ub85c\ud1a0\ucf5c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud558\ub294 \uac83\ub9cc\uc73c\ub85c \ubaa8\ub4c8\uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc5b4\uc57c \ud568. NF-02 \uac00\ub3c5\uc131 - \ubaa8\ub4e0 \ucf54\ub4dc\ub294 <code>black</code>, <code>isort</code> \ud3ec\ub9e4\ud130\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc77c\uad00\ub41c \uc2a4\ud0c0\uc77c\uc744 \uc720\uc9c0.- \ubaa8\ub4e0 \uacf5\uac1c(public) \ud074\ub798\uc2a4 \ubc0f \ud568\uc218\uc5d0\ub294 Google Style Docstring\uc744 \uc791\uc131\ud558\uc5ec \ud30c\ub77c\ubbf8\ud130, \ubc18\ud658\uac12, \uc608\uc678 \ub4f1\uc744 \uba85\ud655\ud788 \uc124\uba85. NF-03 \ud45c\uc900\ud654 - \ubaa8\ub4e0 \ud504\ub85c\ud1a0\ucf5c\uc740 <code>ProtocolManager</code>\ub97c \ud1b5\ud574 <code>get_protocol(\"\uc774\ub984\")</code> \ud615\uc2dd\uc758 \ub2e8\uc77c API\ub85c \uc811\uadfc.- \uc608\uc678 \ucc98\ub9ac\ub294 <code>common.exceptions</code>\uc5d0 \uc815\uc758\ub41c \ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc77c\uad00\ub418\uac8c \ucc98\ub9ac.- \ub85c\uae45\uc740 Python \ud45c\uc900 <code>logging</code> \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud558\uba70, \uc124\uc815\uc774 \ud1b5\uc77c\ub418\uc5b4\uc57c \ud568. NF-04 \uc720\uc9c0\ubcf4\uc218\uc131 - \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604(<code>protocols</code>), \uc778\ud130\ud398\uc774\uc2a4(<code>interfaces</code>), \uacf5\ud1b5 \uae30\ub2a5(<code>common</code>) \ub4f1 \uc5ed\ud560\uc5d0 \ub530\ub77c \ucf54\ub4dc\ub97c \uba85\ud655\ud788 \ubd84\ub9ac (\ub0ae\uc740 \uacb0\ud569\ub3c4).- \uac01 \ubaa8\ub4c8\uc740 \ud558\ub098\uc758 \ud575\uc2ec \ucc45\uc784\ub9cc \uac00\uc9c0\ub3c4\ub85d \uc124\uacc4 (\ub192\uc740 \uc751\uc9d1\ub3c4)."},{"location":"prd/#_14","title":"\uc124\uacc4 \uac1c\uc694","text":""},{"location":"prd/#_15","title":"\ub514\ub809\ud1a0\ub9ac \uad6c\uc870","text":"<pre><code>app/\n\u251c\u2500\u2500 common/         # \uc608\uc678, \ub85c\uae45\n\u251c\u2500\u2500 interfaces/     # Protocol \uc778\ud130\ud398\uc774\uc2a4, PacketStructureInterface \uc778\ud130\ud398\uc774\uc2a4\n\u251c\u2500\u2500 protocols/      # MQTTProtocol, TCPClient/TCPServer, SerialProtocol \ub4f1\n\u2502   \u251c\u2500\u2500 mqtt/       # MQTT \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604\n\u2502   \u251c\u2500\u2500 ethernet/   # TCP \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604\n\u2502   \u2514\u2500\u2500 serial/     # Serial \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604\n\u251c\u2500\u2500 manager/        # \ud504\ub85c\ud1a0\ucf5c \ub85c\ub529 \ubc0f \uad00\ub9ac\n\u251c\u2500\u2500 worker/         # Listener, Requester\n\u251c\u2500\u2500 data.py         # SendData, ReceivedData\n\u251c\u2500\u2500 network.py      # NetworkHandler\n\u2514\u2500\u2500 cli.py          # CLI \uc778\ud130\ud398\uc774\uc2a4\n</code></pre>"},{"location":"prd/#_16","title":"\uc8fc\uc694 \ucef4\ud3ec\ub10c\ud2b8","text":"<ul> <li>\uc778\ud130\ud398\uc774\uc2a4 \ub808\uc774\uc5b4<ul> <li><code>ReqResProtocol</code> / <code>PubSubProtocol</code>: \ud1b5\uc2e0 \uc720\ud615\ubcc4 \ud45c\uc900 \uc778\ud130\ud398\uc774\uc2a4</li> <li><code>BaseProtocol</code>: \ubaa8\ub4e0 \ud504\ub85c\ud1a0\ucf5c\uc758 \uacf5\ud1b5 \uae30\ubc18 \uc778\ud130\ud398\uc774\uc2a4</li> <li><code>PacketStructureInterface</code>: \ud328\ud0b7 \uc9c1\ub82c\ud654/\uc5ed\uc9c1\ub82c\ud654 \ud45c\uc900 \uc778\ud130\ud398\uc774\uc2a4</li> </ul> </li> <li>\ub370\uc774\ud130 \ud074\ub798\uc2a4<ul> <li><code>SendData</code>: \uc804\uc1a1 \ub370\uc774\ud130 \ucd94\uc0c1 \ud074\ub798\uc2a4</li> <li><code>ReceivedData</code>: \uc218\uc2e0 \ub370\uc774\ud130 \ucd94\uc0c1 \ud074\ub798\uc2a4</li> </ul> </li> <li>\ub124\ud2b8\uc6cc\ud06c \ud578\ub4e4\ub7ec<ul> <li><code>NetworkHandler</code>: \ub124\ud2b8\uc6cc\ud06c \ud1b5\uc2e0 \ud578\ub4e4\ub7ec</li> </ul> </li> <li>\uc6cc\ucee4 \ubaa8\ub4c8<ul> <li><code>Listener</code>: \uc218\uc2e0 \ucc98\ub9ac \uc2a4\ub808\ub4dc</li> <li><code>Requester</code>: \uc1a1\uc2e0 \ucc98\ub9ac \uc2a4\ub808\ub4dc</li> </ul> </li> <li>\ub9e4\ub2c8\uc800 \uc2dc\uc2a4\ud15c<ul> <li><code>ReqResManager</code>: ReqRes \ud504\ub85c\ud1a0\ucf5c \ud1b5\ud569 \uad00\ub9ac<ul> <li><code>register(name, protocol)</code>: \ud504\ub85c\ud1a0\ucf5c \ub4f1\ub85d</li> <li><code>connect(name)</code>: \uc5f0\uacb0</li> <li><code>send(name, data)</code>: \ub370\uc774\ud130 \uc804\uc1a1 (int \ubc18\ud658)</li> <li><code>read(name)</code>: \ub370\uc774\ud130 \uc218\uc2e0 (bytes \ubc18\ud658)</li> <li><code>disconnect(name)</code>: \uc5f0\uacb0 \ud574\uc81c</li> </ul> </li> <li><code>PubSubManager</code>: PubSub \ud504\ub85c\ud1a0\ucf5c \ud1b5\ud569 \uad00\ub9ac<ul> <li><code>register(name, protocol)</code>: \ud504\ub85c\ud1a0\ucf5c \ub4f1\ub85d</li> <li><code>connect(name)</code>: \uc5f0\uacb0</li> <li><code>publish(name, topic, message)</code>: \uba54\uc2dc\uc9c0 \ubc1c\ud589</li> <li><code>subscribe(name, topic, callback)</code>: \ud1a0\ud53d \uad6c\ub3c5</li> <li><code>disconnect(name)</code>: \uc5f0\uacb0 \ud574\uc81c</li> </ul> </li> </ul> </li> <li>RFC \uc900\uc218 MQTT \uad6c\ud604<ul> <li><code>MQTTProtocol</code>: paho-mqtt \uae30\ubc18 RFC \uc900\uc218 \uad6c\ud604</li> <li><code>BrokerConfig</code>, <code>ClientConfig</code>: \uc124\uc815 \uad00\ub9ac\ub97c \uc704\ud55c \ub370\uc774\ud130 \ud074\ub798\uc2a4</li> </ul> </li> <li>TCP \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604<ul> <li><code>TCPClient</code>: TCP \ud074\ub77c\uc774\uc5b8\ud2b8 \uad6c\ud604</li> <li><code>TCPServer</code>: TCP \uc11c\ubc84 \uad6c\ud604</li> </ul> </li> <li>Serial \ud504\ub85c\ud1a0\ucf5c \uad6c\ud604<ul> <li><code>SerialProtocol</code>: \uc2dc\ub9ac\uc5bc \ud1b5\uc2e0 \uad6c\ud604</li> </ul> </li> <li>\ubcf4\uc548 \ubc0f \uc2e0\ub8b0\uc131<ul> <li>Username/Password \uc778\uc99d</li> <li>\uc608\uae30\uce58 \ubabb\ud55c \uc5f0\uacb0 \uc2e4\ud328 \uc2dc \uc790\ub3d9 \uc7ac\uc5f0\uacb0 (\uc9c0\uc218 \ubc31\uc624\ud504)</li> <li>\uc7ac\uc5f0\uacb0 \uc2dc \uad6c\ub3c5 \ubcf5\uad6c \ubc0f \uba54\uc2dc\uc9c0 \ud050 \ucc98\ub9ac</li> <li>Thread-safe \uc124\uacc4</li> </ul> </li> <li>\uc5d0\ub7ec \ucc98\ub9ac<ul> <li>RFC \uc900\uc218 \uc0c1\uc138 \uc5f0\uacb0 \uc2e4\ud328 \ucf54\ub4dc \ucc98\ub9ac</li> <li>\uc608\uc678 \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870</li> </ul> </li> </ul>"},{"location":"prd/#_17","title":"\uc0ac\uc6a9\uc790 \uc2dc\ub098\ub9ac\uc624","text":""},{"location":"prd/#mqtt","title":"\ud604\uc7ac \uad6c\ud604\ub41c MQTT \uc608\uc2dc","text":"<pre><code>from eq1_network.protocols.mqtt.mqtt_protocol import MQTTProtocol, BrokerConfig, ClientConfig\n\n# \uae30\ubcf8 \uc778\uc99d \uc124\uc815\nbroker_config = BrokerConfig(\n    broker_address=\"broker.example.com\",\n    port=1883,\n    username=\"mqtt_username\",\n    password=\"mqtt_password\"\n)\nclient_config = ClientConfig()\n\nmqtt = MQTTProtocol(broker_config, client_config)\n\n# \uba85\uc2dc\uc801 \uc5f0\uacb0 \ud544\uc694\nmqtt.connect()\n\ndef message_callback(topic: str, payload: bytes):\n    print(f\"Received: [{topic}] {payload.decode()}\")\n\nmqtt.subscribe(\"topic/test\", message_callback)\nmqtt.publish(\"topic/test\", \"hello\", qos=1, retain=True)\nmqtt.disconnect()\n</code></pre>"},{"location":"prd/#tcp","title":"\ud604\uc7ac \uad6c\ud604\ub41c TCP \uc608\uc2dc","text":"<pre><code>from app import ReqResManager\nfrom eq1_network.protocols.ethernet.tcp_client import TCPClient\nfrom eq1_network.protocols.ethernet.tcp_server import TCPServer\n\n# TCP \ud074\ub77c\uc774\uc5b8\ud2b8 \uc124\uc815\ntcp_client = TCPClient(\"localhost\", 8080, timeout=1)\nReqResManager.register(\"tcp_client\", tcp_client)\n\n# TCP \uc11c\ubc84 \uc124\uc815\ntcp_server = TCPServer(\"localhost\", 8081, timeout=1)\nReqResManager.register(\"tcp_server\", tcp_server)\n\n# \uc5f0\uacb0 \ubc0f \ud1b5\uc2e0\nif ReqResManager.connect(\"tcp_client\"):\n    result = ReqResManager.send(\"tcp_client\", b\"Hello Server!\")\n    if result &gt; 0:\n        response = ReqResManager.read(\"tcp_client\")\n        print(f\"Response: {response.decode()}\")\n    ReqResManager.disconnect(\"tcp_client\")\n</code></pre>"},{"location":"prd/#serial","title":"\ud604\uc7ac \uad6c\ud604\ub41c Serial \uc608\uc2dc","text":"<pre><code>from app import ReqResManager\nfrom eq1_network.protocols.serial.serial_protocol import SerialProtocol\n\n# \uc2dc\ub9ac\uc5bc \ud504\ub85c\ud1a0\ucf5c \uc124\uc815\nserial_protocol = SerialProtocol(\"COM1\", 9600, timeout=1)\nReqResManager.register(\"serial\", serial_protocol)\n\n# \uc5f0\uacb0 \ubc0f \ud1b5\uc2e0\nif ReqResManager.connect(\"serial\"):\n    result = ReqResManager.send(\"serial\", b\"AT\\r\\n\")\n    if result &gt; 0:\n        response = ReqResManager.read(\"serial\")\n        print(f\"Response: {response.decode()}\")\n    ReqResManager.disconnect(\"serial\")\n</code></pre>"},{"location":"prd/#_18","title":"\ubbf8\uad6c\ud604 \uae30\ub2a5 \uc608\uc2dc (\uacc4\ud68d\ub9cc)","text":"<pre><code># \ub2e4\uc74c \uae30\ub2a5\ub4e4\uc740 \uc544\uc9c1 \uad6c\ud604\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4:\n\n# TLS/SSL \ubcf4\uc548 \uc5f0\uacb0 (\ubbf8\uad6c\ud604)\nbroker_config = BrokerConfig(\n    broker_address=\"secure-broker.example.com\",\n    port=8883,\n    ca_certs=\"/path/to/ca.crt\"  # \ubbf8\uad6c\ud604\n)\n\n# Will Message \uc124\uc815 (\ubbf8\uad6c\ud604)\nmqtt.set_will(\"device/status\", \"offline\", qos=1, retain=True)  # \ubbf8\uad6c\ud604\n</code></pre>"},{"location":"prd/#reqres","title":"\ud5a5\ud6c4 Req/Res \uc608\uc2dc (\uacc4\ud68d)","text":"<pre><code># Modbus \ud504\ub85c\ud1a0\ucf5c \ucd94\uac00 \uc608\uc815\nmodbus = ModbusProtocol(\"192.168.0.10\", 502)\nmodbus.connect()\nmodbus.send(b\"PING\")\nresp = modbus.read()\n</code></pre>"},{"location":"prd/#packetstructure","title":"PacketStructure \uc0ac\uc6a9 \uc608\uc2dc","text":"<pre><code># PacketInterface\ub97c \ud1b5\ud55c \ud45c\uc900\ud654\ub41c \ub370\uc774\ud130 \ucc98\ub9ac\nfrom eq1_network.interfaces.packet import PacketStructureInterface\n\nclass PacketStructure(PacketStructureInterface):\n    HEAD_PACKET = b'$'\n    TAIL_PACKET = b'$'\n\n    @classmethod\n    def to_packet(cls, data: bytes) -&gt; bytes:\n        return cls.HEAD_PACKET + data + cls.TAIL_PACKET\n\n    @classmethod\n    def from_packet(cls, packet: bytes) -&gt; bytes:\n        if not cls.is_valid(packet):\n            raise ValueError(f\"Packet Structure Error : {packet}\")\n\n        return packet[1:-1]\n\n    @classmethod\n    def is_valid(cls, packet: bytes) -&gt; bool:\n        if (cls.TAIL_PACKET + cls.HEAD_PACKET) in packet:\n            return False\n\n        if packet[:1] != cls.HEAD_PACKET:\n            return False\n\n        if packet[-1:] != cls.TAIL_PACKET:\n            return False\n\n        return True\n\n    @classmethod\n    def split_packet(cls, packet: bytes) -&gt; list[bytes]:\n        results = []\n        for _d in packet.split(cls.HEAD_PACKET):\n            if len(_d) == 0:\n                continue\n            results.append(cls.HEAD_PACKET+_d+cls.TAIL_PACKET)\n        return results\n\n# SendData \ud074\ub798\uc2a4 \uc0ac\uc6a9\nclass TestSendData(SendData):\n    def __init__(self, cmd: str, data: list):\n        self.cmd = cmd\n        self.data = data\n\n    def to_bytes(self) -&gt; bytes:\n        result = self.cmd\n        for datum in self.data:\n            result += f\"#{datum}\"\n        return result.encode('utf-8')\n\n# ReceivedData \ud074\ub798\uc2a4 \uc0ac\uc6a9\nclass TestReceivedData(ReceivedData):\n    @classmethod\n    def from_bytes(cls, data: bytes):\n        data_str = data.decode('utf-8')\n        split_data = data_str.split('#')\n        if len(split_data) == 1:\n            return cls(cmd=split_data[0], data=[])\n        return cls(cmd=split_data[0], data=split_data[1:])\n\nsend_data = TestSendData(\"TEST\", [\"1\", \"2\", \"3\", \"4\", \"5\"])\npacket_bytes = PacketStructure.to_packet(send_data.to_bytes())  # List\ub97c \ubc14\uc774\ud2b8\ub85c \uc9c1\ub82c\ud654\n\n# NetworkHandler \uc0ac\uc6a9\nnetwork_handler = NetworkHandler(network_config, event_callback)\nnetwork_handler.send_data(send_data)  # PacketStructure \uae30\ubc18 \uc804\uc1a1\n</code></pre>"},{"location":"prd/#_19","title":"\ud14c\uc2a4\ud2b8 \uc804\ub7b5","text":"<ul> <li>\ub2e8\uc704 \ud14c\uc2a4\ud2b8 (Unit Test)<ul> <li>pytest \uae30\ubc18\uc73c\ub85c \uac01 \ud504\ub85c\ud1a0\ucf5c\uacfc PacketStructure \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc9c4\ud589</li> <li>Mock \uac1d\uccb4\ub97c \uc774\uc6a9\ud55c \ub3c5\ub9bd\uc801\uc778 \ub3d9\uc791 \uac80\uc99d</li> <li>PacketStructureInterface \uc778\ud130\ud398\uc774\uc2a4 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \ucd94\uac00</li> <li>NetworkHandler \ud074\ub798\uc2a4 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \ucd94\uac00</li> </ul> </li> <li>\ud1b5\ud569 \ud14c\uc2a4\ud2b8 (Integration Test)<ul> <li>\uc2e4\uc81c MQTT \ube0c\ub85c\ucee4 \ud658\uacbd\uc5d0\uc11c publish/subscribe \uae30\ub2a5 \uac80\uc99d</li> <li>TCP \ud074\ub77c\uc774\uc5b8\ud2b8/\uc11c\ubc84 \ud1b5\uc2e0 \ud14c\uc2a4\ud2b8</li> <li>\uc2dc\ub9ac\uc5bc \ud1b5\uc2e0 \ud14c\uc2a4\ud2b8</li> <li>SendData/ReceivedData \ud074\ub798\uc2a4 \ud1b5\ud569 \ud14c\uc2a4\ud2b8 \ucd94\uac00</li> <li>PacketStructure \uae30\ubc18 \ud1b5\uc2e0 \ud1b5\ud569 \ud14c\uc2a4\ud2b8 \ucd94\uac00</li> </ul> </li> <li>\uc790\ub3d9\ud654<ul> <li>CI \ud30c\uc774\ud504\ub77c\uc778\uc5d0\uc11c \uc790\ub3d9 \uc2e4\ud589\ub418\ub3c4\ub85d \uc124\uc815</li> <li>\ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815\uc744 \ud1b5\ud574 \ubaa9\ud45c \ucee4\ubc84\ub9ac\uc9c0 90% \uc774\uc0c1 \uc720\uc9c0</li> </ul> </li> </ul>"},{"location":"prd/#_20","title":"\uc704\ud5d8 \uc644\ud654","text":"\uc704\ud5d8 (Risk) \ubc1c\uc0dd \uac00\ub2a5\uc131 \uc601\ud5a5\ub3c4 \ub300\uc751 \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc758\uc874\uc131 \uc911\uac04 \ub192\uc74c - \ub77c\uc774\ube0c\ub7ec\ub9ac \ud575\uc2ec \uae30\ub2a5\uc744 \uc9c1\uc811 \ud638\ucd9c\ud558\uc9c0 \uc54a\uace0, \uc5b4\ub311\ud130(Adapter) \ud074\ub798\uc2a4\ub85c \ud55c \ubc88 \ub354 \uac10\uc2f8\uc11c \uad6c\ud604\ud569\ub2c8\ub2e4.- \uc774\ub97c \ud1b5\ud574 \ubb38\uc81c \ubc1c\uc0dd \uc2dc \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac(\uc608: gmqtt)\ub85c \ucd5c\uc18c\ud55c\uc758 \ucf54\ub4dc \uc218\uc815\uc73c\ub85c \uad50\uccb4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud50c\ub7ec\uadf8\uc778 \uc544\ud0a4\ud14d\ucc98\uc758 \ud55c\uacc4 \uc911\uac04 \ub192\uc74c - \ucd08\uae30 \uc778\ud130\ud398\uc774\uc2a4 \uc124\uacc4 \uc2dc TCP/IP \uae30\ubc18\uc758 \uc694\uccad/\uc751\ub2f5 \uc2dc\ub098\ub9ac\uc624\ub97c \ubbf8\ub9ac \uace0\ub824\ud558\uc5ec <code>ReqResProtocol</code> \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.- Modbus \ud504\ub85c\ud1a0\ucf5c \ucd94\uac00 \ub2e8\uacc4\uc5d0\uc11c PoC(Proof of Concept)\ub97c \uba3c\uc800 \uc9c4\ud589\ud558\uc5ec \uc544\ud0a4\ud14d\ucc98\uc758 \ud655\uc7a5\uc131\uc744 \uac80\uc99d\ud569\ub2c8\ub2e4. \ub0ae\uc740 \ub0b4\ubd80 \ucc44\ud0dd\ub960 \ub192\uc74c \uc911\uac04 - \uc0c1\uc138\ud55c <code>README.md</code>\uc640 \uc608\uc81c \ucf54\ub4dc\ub97c \uc81c\uacf5\ud558\uc5ec \uc0ac\uc6a9 \uc7a5\ubcbd\uc744 \ub0ae\ucda5\ub2c8\ub2e4.- \uc8fc\uc694 \uc0ac\uc6a9 \uc608\uc0c1 \ud300\uc744 \ub300\uc0c1\uc73c\ub85c \ucd08\uae30 \ubc84\uc804 \ub370\ubaa8 \ubc0f \ud53c\ub4dc\ubc31 \uc138\uc158\uc744 \uc9c4\ud589\ud558\uc5ec \uc694\uad6c\uc0ac\ud56d\uc744 \ubc18\uc601\ud558\uace0 \ucc38\uc5ec\ub97c \uc720\ub3c4\ud569\ub2c8\ub2e4. PacketStructure \uc124\uacc4 \ubcf5\uc7a1\uc131 \uc911\uac04 \uc911\uac04 - \uac04\ub2e8\ud558\uace0 \uc9c1\uad00\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4 \uc124\uacc4\ub85c \ubcf5\uc7a1\uc131 \ucd5c\uc18c\ud654- \uae30\uc874 SendData/ReceivedData \ud074\ub798\uc2a4\uc640\uc758 \ud638\ud658\uc131 \ubcf4\uc7a5- \ucda9\ubd84\ud55c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc791\uc131\uc73c\ub85c \uc548\uc815\uc131 \ud655\ubcf4 \uae30\uc874 \ucf54\ub4dc \ud638\ud658\uc131 \ub192\uc74c \ub192\uc74c - \ub2e8\uacc4\uc801 \ub9c8\uc774\uadf8\ub808\uc774\uc158\uc73c\ub85c \uae30\uc874 \ucf54\ub4dc\uc640\uc758 \ud638\ud658\uc131 \ubcf4\uc7a5- PacketStructure\uc640 PacketStructureInterface \ubcd1\ud589 \uc9c0\uc6d0 \uae30\uac04 \uc124\uc815- \ucda9\ubd84\ud55c \ud14c\uc2a4\ud2b8\ub97c \ud1b5\ud55c \uc548\uc815\uc131 \uac80\uc99d"},{"location":"prd/#_21","title":"\ubc30\ud3ec \ubc0f \uc7ac\uc0ac\uc6a9","text":"<ul> <li>\ud328\ud0a4\uc9c0\ud654<ul> <li>\ub0b4\ubd80 PyPI \uc11c\ubc84\uc5d0 \uc5c5\ub85c\ub4dc\ud558\uac70\ub098, git submodule \ud615\ud0dc\ub85c \uad00\ub9ac</li> </ul> </li> <li>\uc7ac\uc0ac\uc6a9 \ubc29\ubc95<ul> <li>\ub3d9\uc77c\ud55c \uad6c\uc870\ub97c \uc720\uc9c0\ud558\uc5ec \ub2e4\ub978 \ube44\uc804 \uc2dc\uc2a4\ud15c, \uacf5\uc7a5 \uc790\ub3d9\ud654 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uadf8\ub300\ub85c \uc784\ud3ec\ud2b8 \uac00\ub2a5</li> </ul> </li> <li>\ubc84\uc804 \uad00\ub9ac<ul> <li>SemVer(\uc720\uc758\uc801 \ubc84\uc804) \uc815\ucc45 \uc801\uc6a9</li> <li>\uc8fc\uc694 \ubcc0\uacbd\uc0ac\ud56d \ubc1c\uc0dd \uc2dc CHANGELOG\uc5d0 \uae30\ub85d</li> </ul> </li> </ul>"},{"location":"prd/#_22","title":"\uc81c\uc57d\uc0ac\ud56d","text":""},{"location":"prd/#_23","title":"\uae30\uc220\uc801 \uc81c\uc57d","text":"<ul> <li>Python \ubc84\uc804: 3.10.18 (\uad8c\uc7a5)</li> <li>\uc678\ubd80 \uc758\uc874\uc131: paho-mqtt 1.6.0+, pyserial 3.5+</li> <li>\uc6b4\uc601\uccb4\uc81c: Windows, macOS, Linux</li> </ul>"},{"location":"prd/#_24","title":"\uae30\ub2a5\uc801 \uc81c\uc57d","text":"<ul> <li>\ud604\uc7ac \uc9c0\uc6d0: MQTT v3.1.1, TCP, Serial \uae30\ubcf8 \uae30\ub2a5\ub9cc \uc9c0\uc6d0</li> <li>\ubbf8\uad6c\ud604: TLS/SSL, Will Message, MQTT v5.0 \uae30\ub2a5\ub4e4</li> <li>\ub3d9\uc2dc \uc5f0\uacb0: \ub2e8\uc77c \ube0c\ub85c\ucee4\ub2f9 \ud558\ub098\uc758 \uc5f0\uacb0\ub9cc \uc9c0\uc6d0</li> <li>\uba85\uc2dc\uc801 \uc5f0\uacb0: connect() \uba54\uc11c\ub4dc \ud638\ucd9c \ud544\uc218 (\uc790\ub3d9 \uc5f0\uacb0 \uc5c6\uc74c)</li> </ul>"},{"location":"prd/#_25","title":"\uc131\ub2a5 \uc81c\uc57d","text":"<ul> <li>\ucc98\ub9ac\ub7c9: \ucd08\ub2f9 10,000 \uba54\uc2dc\uc9c0 \ucc98\ub9ac \uac00\ub2a5</li> <li>\ub3d9\uc2dc \uc5f0\uacb0: 100\uac1c \uc774\ud558 \uad8c\uc7a5</li> <li>\uba54\ubaa8\ub9ac: \uc5f0\uacb0\ub2f9 \uc57d 10MB \uc0ac\uc6a9</li> </ul>"},{"location":"prd/#_26","title":"\ucc38\uace0 \uc790\ub8cc","text":"<ul> <li>MQTT Protocol</li> <li>README.md</li> </ul>"}]}